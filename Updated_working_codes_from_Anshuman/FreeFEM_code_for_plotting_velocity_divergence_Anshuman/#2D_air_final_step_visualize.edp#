// Compute Wave number using Newton-Raphsoyn
// Geometry: Helmholtz rasonators 
// With smoothed edges

//load "MPICG"
load "UMFPACK64";
load "medit";
real cpu=clock();

//Inputs

real L=1e-2;
real ht=0.2*L;          // height of main tube (m)
real hn=0.15*L;        // height of neck (m)
real wn=0.015*L;       // width of neck (m)
real Lx=L;            // length of cell /x (m)
real Ly=L;           // length of cell /y (m)
real wc=L-hn;       // width of cavity (m)
real hc=L-2*hn-ht;  // height of cavity (m)
real rn=hn/5.;

// parametres independants ajustables

real T0=20+273.15;                 //(K)
real rho0=1.205;                  //(kg/m3)
real eta=1.836924704747684e-5;
real zeta=0.6*eta;
real kappa=0.0257;                //(W/m.K)
real beta0=3.43e-3;              //(1/K)
//real Pr=0.713;
real gamma=1.4;

// parametres dependants

//real nu=eta/rho0;                //(m2/s)  1.5244e-5
//real cp=Pr*kappa/rho0/nu;  	   // (J/kg.K)
real nu=eta/rho0; //%(m2/s)  1.5244e-5
//cp=0.713*kappa/rho0/nu;  % (J/kg.K)  
real cp=1.0169e+03;
real Pr=cp*eta/kappa;

real cv= cp/gamma;             //  (J/kg.K)
real p0=rho0*cp*(gamma-1.)/(gamma*beta0^2*T0);   // (Pa)
real chi0inv=gamma*p0;          //(Pa)
real chi0=1./gamma/p0;          // (1/Pa)
real Ka=chi0inv;
real K0=Ka/gamma;
real c0=sqrt(chi0inv/rho0);     //  (m/s)



real phi0=1.; // corresponds excitation in heat equation
complex k;

//declare rho and chi
complex rho=1.0;
complex chi=1.0;


// declar out for writing to the output file:
complex Fout=1.0;

//real beta0=sqrt(rho0*cp*chi0*(gamma-1)/T0);


int n=20; // mesh properties
int nedge=10; 

real xMin=-1.*Lx/2., xMax=Lx/2., yMin=0., yMax=Ly;
real Vtot=Lx*Ly;


// build geometry

border a1(t=ht,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=5;};
border a3(t=yMin,ht){x=xMax;y=t;label=2;};// output
border a4(t=xMax,wn/2.+rn){x=t;y=ht;label=3;};
border c1(t=3*pi/2.,pi){ x=wn/2.+rn+rn*cos(t); y=ht+rn+rn*sin(t);label=5;};
border a5(t=ht+rn,ht+hn-rn){x=wn/2.;y=t;label=5;};
border c2(t=pi,pi/2.){ x=wn/2.+rn+rn*cos(t); y=ht+hn-rn+rn*sin(t);label=3;};
border a6(t=wn/2.+rn,wc/2.-rn){x=t;y=ht+hn;label=5;};
border c3(t=3*pi/2.,2*pi){ x=wc/2.-rn+rn*cos(t); y=ht+hn+rn+rn*sin(t);label=4;};
border a7(t=ht+hn+rn,ht+hn+hc-rn){x=wc/2.;y=t;label=5;};
border c4(t=0,pi/2.){ x=wc/2.-rn+rn*cos(t); y=ht+hn+hc-rn+rn*sin(t);label=4;};
border a8(t=wc/2.-rn,-1.*wc/2.+rn){x=t;y=ht+hn+hc;label=5;};
border c5(t=pi/2.,pi){ x=-1.*wc/2.+rn+rn*cos(t); y=ht+hn+hc-rn+rn*sin(t);label=4;};
border a9(t=ht+hn+hc-rn,ht+hn+rn){x=-1.*wc/2.;y=t;label=5;};
border c6(t=pi,3*pi/2.){ x=-1.*wc/2.+rn+rn*cos(t); y=ht+hn+rn+rn*sin(t);label=4;};
border a10(t=-1.*wc/2.+rn,-1.*wn/2.-rn){x=t;y=ht+hn;label=5;};
border c7(t=pi/2., 0){ x=-1.*wn/2.-rn+rn*cos(t); y=ht+hn-rn+rn*sin(t);label=3;};
border a11(t=ht+hn-rn,ht+rn){x=-1.*wn/2.;y=t;label=5;};
border c8(t=2.*pi, 3*pi/2.){ x=-wn/2.-rn+rn*cos(t); y=ht+rn+rn*sin(t);label=3;};
border a12(t=-1.*wn/2.-rn,xMin){x=t;y=ht;label=5;};
mesh Th= buildmesh(a1(n)+a2(n)+a3(n)+a4(n)+c1(nedge)+a5(n)+c2(nedge)+a6(n)+c3(nedge)+a7(n)+c4(nedge)+a8(n)+c5(nedge)+a9(n)+c6(nedge)+a10(n)+c7(nedge)+a11(n)+c8(nedge)+a12(n));


int nbpt = 40;  // frequency number of points 


string fileout="smooth.txt";


real klpi,pasklpi,klpimin=0.002,klpimax=0.5;
pasklpi= (klpimax-klpimin)/(nbpt);

real freq; 
real omega;


complex[int] tabk(nbpt);



tabk(0) = 0.030707861553 + 0.030025936870i;
tabk(1) = 7.561345231542 + 0.559148906284i;
tabk(2) = 14.987477888268 + 1.068012743193i;
tabk(3) = 22.598094058169 + 1.827565010231i;
tabk(4) = 30.547178482898 + 2.977255277057i;
tabk(5) = 38.994124457600 + 4.746611807914i;
tabk(6) = 48.093364056022 + 7.546183781386i;
tabk(7) = 57.892516969960 + 12.125405201057i;
tabk(8) = 67.945696430017 + 19.787239463137i;
tabk(9) = 76.215266292310 + 32.196407690713i;
tabk(10) = 77.891683269655 + 48.858008438330i;
tabk(11) = 69.791570277702 + 63.085547473554i;
tabk(12) = 57.343779610420 + 68.563891964798i;
tabk(13) = 46.965246853927 + 66.996680344571i;
tabk(14) = 40.123457817137 + 62.107623589907i;
tabk(15) = 36.200721650208 + 55.864188539936i;
tabk(16) = 34.543978738099 + 48.997847630294i;
tabk(17) = 34.859890617591 + 41.811281160971i;
tabk(18) = 37.120038331245 + 34.642270753836i;
tabk(19) = 41.235473069049 + 28.072442874965i;
tabk(20) = 46.706815834599 + 22.684976635410i;
tabk(21) = 52.804249065167 + 18.621776876193i;
tabk(22) = 59.008070516471 + 15.644720284931i;
tabk(23) = 65.086024974978 + 13.446372224249i;
tabk(24) = 70.968049763342 + 11.787614318666i;
tabk(25) = 76.650165690573 + 10.505818750365i;
tabk(26) = 82.150495792235 + 9.493234361129i;
tabk(27) = 87.492237858605 + 8.677721428693i;
tabk(28) = 92.697666766843 + 8.009908112185i;
tabk(29) = 97.786342754117 + 7.455168394308i;
tabk(30) = 102.774858678289 + 6.988637777417i;
tabk(31) = 107.677106001224 + 6.592069815547i;
tabk(32) = 112.504674412537 + 6.251810228219i;
tabk(33) = 117.267245699615 + 5.957460675245i;
tabk(34) = 121.972937638624 + 5.700977285225i;
tabk(35) = 126.628589825594 + 5.476049456739i;
tabk(36) = 131.239996139981 + 5.277663337666i;
tabk(37) = 135.812092115165 + 5.101789533390i;
tabk(38) = 140.349105602004 + 4.945156002578i;
tabk(39) = 144.854678063495 + 4.805080414747i;


//for (int ii=0; ii<nbpt ; ii++) 
int ii=3; // choose the value of klpi where you want to plot the divergence
{ //before edit ii<nbpt
klpi= klpimin+(pasklpi*ii);
//klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));

cout << "klpi: " << klpi << endl;

freq= (c0*klpi)/(2*Lx);
omega=2*pi*freq;

complex q0=-1i*omega*phi0; // excitation in heat equation



k=tabk(ii);
complex f0=-1i*k;
complex err1=1.+1i;
complex errF=1.+1i;
int iteration = 1;
while (abs(err1)> 0.008) {



//*****************************************************************  Solve the problem of density ******************************************************* 
//Define FE space for density
cout << "***** Solving the problem of density [1/8]" << endl;
fespace Uhr(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phr(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];

// Density problem

problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) =
int2d(Th)(1i*omega*br*lr-dx(vxr)*lr-dy(vyr)*lr-1i*k*vxr*lr)+
int2d(Th)(
        - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr
        - pr*(dx(uxr)+dy(uyr))
        + 1i*k*pr*uxr
        + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr)))
        - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr))
        + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr))
        + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr))
        + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr))
        + eta*(k^2)*(vxr*uxr+vyr*uyr)
        + (zeta+1./3.*eta)*(k^2)*vxr*uxr
        )
      - int2d(Th)(f0*uxr)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr*sr
        + 1i*omega*beta0*T0*pr*sr
        + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr))
        + 2*1i*kappa*k*tr*dx(sr)
        + (k^2)*kappa*tr*sr
        )
   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr)
+on(1,2,vyr=0)
+on(3,4,5,vxr=0,vyr=0,tr=0);
nonlocalDensity;

mesh Thjr=Th;
real errorr=0.002;
real errorc=0.002;

// Creation of the finer mesh Thj          
Thjr=adaptmesh(Thjr,
 [real(vxr),real(vyr),imag(vxr),imag(vyr)],[real(tr),imag(tr)],[real(br),imag(br)]
 ,err=errorr,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the density system on the finer mesh Thj

fespace Uhjr(Thjr,P2,periodic=[[1,y],[2,y]]);
fespace Phjr(Thjr,P1,periodic=[[1,y],[2,y]]);
fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];

cout << "***** Solving the problem of density [2/8]" << endl;
problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
int2d(Thjr)(
        - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
        - pjr*(dx(uxjr)+dy(uyjr))
        + 1i*k*pjr*uxjr
        + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
        - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
        + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
        + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
        + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
        + eta*(k^2)*(vxjr*uxjr+vyjr*uyjr)
        + (zeta+1./3.*eta)*(k^2)*vxjr*uxjr
        )
      - int2d(Thjr)(f0*uxjr)
   + int2d(Thjr)(
        - 1i*omega*rho0*cp*tjr*sjr
        + 1i*omega*beta0*T0*pjr*sjr
        + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
        + 2*1i*kappa*k*tjr*dx(sjr)
        + (k^2)*kappa*tjr*sjr
        )
   + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
+on(1,2,vyjr=0)
+on(3,4,5,vxjr=0,vyjr=0,tjr=0);
nonlocaljDensity;


real phir=int2d(Thjr)(1.)/(Vtot);
real Vfr=int2d(Thjr)(1.);
complex Vxr=1./Vfr*int2d(Thjr)(vxjr);
complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
 rho=(f0-1i*k*Hr)/(-1i*omega*Vxr);

// plot divergence
real[int] colorhsv=[ 
5./6., 1 , 1,
4./6., 1 , 1,
3./6., 1 , 1,
2./6., 1 , 1,
1./6., 1 , 1,
0./6., 1 , 1,
0./6., 1 , 0.5
];
fespace Dh(Thjr,P1dc); 
Dh<complex> divh=dx(vxjr)+dy(vyjr);
Dh magdiv = abs(divh);
plot(magdiv,wait=true, fill=true, hsv=colorhsv, boundary=false, ps="magdiv.eps");
exit(0);


// plot geometry: uncomment the following to plot the geometry
/*
fespace Vhtr(Th,P1); Vhtr u;
u=1;
plot(u,wait=true, fill=true, bw=true, boundary=false, ps="geom.eps");
*/


// plot Re(v(x)) : uncomment the following lines to plot it
/*
plot(real(vxr),fill=1,wait=1,hsv=colorhsv);
*/ //mistake uxr ->vxr, Eunnie 2015.06.19 

// plot Re(v(x)) : uncomment the following lines to plot it
/*
plot(real(uxr),fill=1,wait=1,hsv=colorhsv);
*/


//plot mesh: uncomment the following lines to plot the mesh
plot(Th, wait=true);




//*****************************************************************  Solve the problem of compressibility *******************************************************

//Difine FE space for compressibility
cout << "***** Solving the problem of compressibility [3/8]" << endl;
fespace Uhc(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

// Compressibility problem
problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
int2d(Th)(
        - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
        - pc*(dx(uxc)+dy(uyc))
        + 1i*k*pc*uxc
        + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
        - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
        + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
        + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
        + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
        + eta*(k^2)*(vxc*uxc+vyc*uyc)
        + (zeta+1./3.*eta)*(k^2)*vxc*uxc
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc*sc
        + 1i*omega*beta0*T0*pc*sc
        + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
        + 2*1i*kappa*k*tc*dx(sc)
        + (k^2)*kappa*tc*sc
        )
   - int2d(Th)(beta0*T0*q0*sc) 
   + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
+on(1,2,vyc=0)
+on(3,4,5,vxc=0,vyc=0,tc=0);
nonlocalCompressibility;             
    
mesh Thjc=Th;
//real error=0.002;

// Creatioin of finer mesh 
Thjc=adaptmesh(Thjc,
 [real(vxc),real(vyc),imag(vxc),imag(vyc)],[real(tc),imag(tc)],[real(bc),imag(bc)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the compressibility system on the finer mesh Thj

fespace Uhjc(Thjc,P2,periodic=[[1,y],[2,y]]);
fespace Phjc(Thjc,P1,periodic=[[1,y],[2,y]]);
fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];

cout << "***** Solving the problem of compressibility [4/8]" << endl;
problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
int2d(Thjc)(
        - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
        - pjc*(dx(uxjc)+dy(uyjc))
        + 1i*k*pjc*uxjc
        + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
        - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
        + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
        + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
        + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
        + eta*(k^2)*(vxjc*uxjc+vyjc*uyjc)
        + (zeta+1./3.*eta)*(k^2)*vxjc*uxjc
        )
   + int2d(Thjc)(
        - 1i*omega*rho0*cp*tjc*sjc
        + 1i*omega*beta0*T0*pjc*sjc
        + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
        + 2*1i*kappa*k*tjc*dx(sjc)
        + (k^2)*kappa*tjc*sjc
        )
	- int2d(Thjc)(beta0*T0*q0*sjc)
   + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
+on(1,2,vyjc=0)
+on(3,4,5,vxjc=0,vyjc=0,tjc=0);
nonlocaljCompressibility;

real phic=int2d(Thjc)(1.)/(Vtot);
real Vfc=int2d(Thjc)(1.);
complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
complex B=1./Vfc*int2d(Thjc)(bjc);
complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);
 chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);



	
 



//               ***************************************************** Start  computing the derivatives  ************************************************

cout << "***** Start  computing the derivatives - density [5/8]" << endl;
complex dk= 0.001*k;
complex k1=k+dk;
complex f01=-1i*k1;

// Compute the density in k+dk, rho1
fespace Uhr1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phr1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
int2d(Th)(
        - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
        - pr1*(dx(uxr1)+dy(uyr1))
        + 1i*k1*pr1*uxr1
        + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
        - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
        + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
        + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
        + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
        + eta*(k^2)*(vxr1*uxr1+vyr1*uyr1)
        + (zeta+1./3.*eta)*(k^2)*vxr1*uxr1
        )
      - int2d(Th)(f01*uxr1)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr1*sr1
        + 1i*omega*beta0*T0*pr1*sr1
        + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
        + 2*1i*kappa*k1*tr1*dx(sr1)
        + (k^2)*kappa*tr1*sr1
        )
   + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
+on(1,2,vyr1=0)
+on(3,4,5,vxr1=0,vyr1=0,tr1=0);
nonlocalDensity1;

mesh Thjr1=Th;
//real error=0.002;
Thjr1=adaptmesh(Thjr1,
 [real(vxr1),real(vyr1),imag(vxr1),imag(vyr1)],[real(tr1),imag(tr1)],[real(br1),imag(br1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjr1(Thjr1,P2,periodic=[[1,y],[2,y]]);
fespace Phjr1(Thjr1,P1,periodic=[[1,y],[2,y]]);
fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];

cout << "***** Start  computing the derivatives - density [6/8]" << endl;
problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
int2d(Thjr1)(
        - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
        - pjr1*(dx(uxjr1)+dy(uyjr1))
        + 1i*k1*pjr1*uxjr1
        + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
        - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
        + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
        + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
        + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
        + eta*(k^2)*(vxjr1*uxjr1+vyjr1*uyjr1)
        + (zeta+1./3.*eta)*(k^2)*vxjr1*uxjr1
        )
      - int2d(Thjr1)(f01*uxjr1)
   + int2d(Thjr1)(
        - 1i*omega*rho0*cp*tjr1*sjr1
        + 1i*omega*beta0*T0*pjr1*sjr1
        + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
        + 2*1i*kappa*k1*tjr1*dx(sjr1)
        + (k^2)*kappa*tjr1*sjr1
        )
   + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
+on(1,2,vyjr1=0)
+on(3,4,5,vxjr1=0,vyjr1=0,tjr1=0);
nonlocalj1Density;


real phir1=int2d(Thjr1)(1.)/(Vtot);
real Vfr1=int2d(Thjr1)(1.);
complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

	

// Compute the compressibility in k+dk, chi1

fespace Uhc1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];

cout << "***** Start  computing the derivatives - compressibility [7/8]" << endl;
problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
int2d(Th)(
        - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
        - pc1*(dx(uxc1)+dy(uyc1))
        + 1i*k1*pc1*uxc1
        + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
        - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
        + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
        + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
        + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
        + eta*(k^2)*(vxc1*uxc1+vyc1*uyc1)
        + (zeta+1./3.*eta)*(k^2)*vxc1*uxc1
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc1*sc1
        + 1i*omega*beta0*T0*pc1*sc1
        + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
        + 2*1i*kappa*k1*tc1*dx(sc1)
        + (k^2)*kappa*tc1*sc1
        )
   - int2d(Th)(beta0*T0*q0*sc1) 
   + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
+on(1,2,vyc1=0)
+on(3,4,5,vxc1=0,vyc1=0,tc1=0);
nonlocalCompressibility1;             
    
mesh Thjc1=Th;
Thjc1=adaptmesh(Thjc1,
 [real(vxc1),real(vyc1),imag(vxc1),imag(vyc1)],[real(tc1),imag(tc1)],[real(bc1),imag(bc1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjc1(Thjc1,P2,periodic=[[1,y],[2,y]]);
fespace Phjc1(Thjc1,P1,periodic=[[1,y],[2,y]]);
fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];

cout << "***** Start  computing the derivatives - compressibility [8/8]" << endl;
problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) =
int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+
int2d(Thjc1)(
        - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1
        - pjc1*(dx(uxjc1)+dy(uyjc1))
        + 1i*k1*pjc1*uxjc1
        + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1)))
        - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1))
        + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1))
        + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1))
        + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1))
        + eta*(k^2)*(vxjc1*uxjc1+vyjc1*uyjc1)
        + (zeta+1./3.*eta)*(k^2)*vxjc1*uxjc1
        )
   + int2d(Thjc1)(
        - 1i*omega*rho0*cp*tjc1*sjc1
        + 1i*omega*beta0*T0*pjc1*sjc1
        + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1))
        + 2*1i*kappa*k1*tjc1*dx(sjc1)
        + (k^2)*kappa*tjc1*sjc1
        )
	- int2d(Thjc1)(beta0*T0*q0*sjc1)
   + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1)
+on(1,2,vyjc1=0)
+on(3,4,5,vxjc1=0,vyjc1=0,tjc1=0);
nonlocalj1Compressibility;

real phic1=int2d(Thjc1)(1.)/(Vtot);
real Vfc1=int2d(Thjc1)(1.);
complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1);
complex B1=1./Vfc1*int2d(Thjc1)(bjc1);
complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1);
complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1);



// Expressions of rhop and chip

//complex rhop= (rho1-rho)/dk;
//complex chip= (chi1-chi)/dk;


//            ************************************************* End computing the derivatives ***********************************************

//Previous version
//complex F= omega^2-k^2./rho/chi;
//complex F1= omega^2-k1^2./rho1/chi1;



complex F= rho*chi*omega^2-k^2;
complex F1=rho1*chi1*omega^2-k1^2;
complex Fp=(F1-F)/dk; 
complex kout=k-F/Fp;
err1=(kout-k)/k;
errF=(F-F1);
k=kout;

// Print iteration number
cout << "Iteration number: " << iteration << endl;
iteration=iteration+1;
// Print the value of k
cout << "k=" << k << endl;
// Print Error in Newton-Raphson
cout << "Erreur : " << abs(err1) << endl;


// temporary F for outputting to the file:
Fout= omega^2-k^2./rho/chi;



  }


ofstream ff(fileout,append);
	   {
	   int nold=ff.precision(10);
   
   	    ff.scientific << klpi << " "<< real(k) << " "<< imag(k) <<" "<< real(omega/k) << " " << imag(omega/k) << " " << real(Fout) << " " << imag(Fout) << " " << real(rho) << " " << imag(rho) << " " << real(chi) << " " << imag(chi) << " "  << real(1.0/chi) << " "<< imag(1.0/chi) << endl ;

           }
      
}





cpu=clock()-cpu;
cout << "cpu: " << cpu << endl;




