//--------------------------------------------------------------------//
// Newton Iteration on an array of rigid cylinders in 2D 
// Compute the complex wavenumber k and phase velocity c
// 2nd Mode 
// Created by Navid Nemati
// Modified by Anshuman Kumar
// Modified by Yoonkyung Eunnie Lee 2015-08-11
//--------------------------------------------------------------------//
// load "medit";
load "UMFPACK64";

//------------------------------------------------------------
//- Set output filebase 
//------------------------------------------------------------
string filebase = "NewtCyl_phi90_rootfinding";
string logfilename = filebase+".log";
{ ofstream f(logfilename,append);
  f << "Opened Log File..." << endl;
};

//------------------------------------------------------------
//- Load pre-set geometry & physical parameters
//------------------------------------------------------------
include "NewtCyl_phi90_geometry.idp"; // geometry input file 
  //------------------------------------------------------------
  //- Fine Mesh Load       -------------------------------------
  //------------------------------------------------------------
  mesh Thj=readmesh("NewtCyl_phi90_Th100.msh");

int logging=0; //write log file and display output if logging=1; 
//------------------------------------------------------------
//- Set Timer and Begin Loop 
//------------------------------------------------------------
real cpu=clock();

complex k; 			// complex wavenumber, [rad/m]
int  nbpt = 100;                 // frequency number of points
real klpi;                      // klpi: dimensionless frequency [kL/pi]
real klpimin = 0.05;
real klpimax = 5.00;
//real dklpi = (klpimax-klpimin)/(nbpt-1); //unit step, linearly spaced

//------------------------------------------------------------
//- Load tabk 
//------------------------------------------------------------
complex[int] tabk(nbpt); //k tabulated (initial guess)
include "NewtCyl_phi90_tabk_Mode2.idp"; // tabk input file 

real freq; 	//  [1/s]
real omega;	//  [rad/s]

for(int ii=15;ii<16;ii++) { //sample 1 frequency // Vec_kaLpi=0.100462
//for(int ii=0; ii<nbpt ; ii++) {
  //klpi= klpimin+(dklpi*ii); //linear spacing for x
  klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));//log spaced x
  if(logging)
    { ofstream f(logfilename,append);
      cout << "klpi: " << klpi << endl;
      f    << "klpi: " << klpi << endl;
    };
  
  freq= (c0*klpi)/(2*Lx);
  omega=2*pi*freq;
  complex q0=-1i*omega*phi0;
  

  //------------------------------------------------------------
  //- Prepare contour integration on complex k domain 
  //------------------------------------------------------------
  int ngamm = 128; //number of contour points
  complex g0 = 36711.468838+(6592.761443i); //origin
  real rad0 = 100000.0;         // radius
  real[int] theta(ngamm);       // angle theta
  complex[int] gamm(ngamm);     // contour gamma 
  complex[int] gammp(ngamm);    // contour d(gamma)
  complex s0 = 0.0;             // contour integral initialization 
  complex s1 = 0.0;             // contour integral initialization  
  complex s2 = 0.0;             // contour integral initialization 
  for(int jj=0;jj<ngamm;jj++){
    theta[jj] = 2.*pi*jj/ngamm; 
    gamm[jj] = g0 + rad0*(cos(theta[jj]) + 1i*sin(theta[jj]));
    gammp[jj]= rad0*(-sin(theta[jj]) + 1i*cos(theta[jj])); 
  }

  //------------------------------------------------------------
  //- Run Loop in k space for contour integration 
  //------------------------------------------------------------
  for(int jj=0;jj<ngamm;jj++){
    //  k=tabk(ii); //initial guess (k will be updated in the code)
    k=gamm(jj); // k values go around the contour 
    if(logging)
      { ofstream f(logfilename,append);
        cout << "k (gamm)= " << real(k) << " + " << imag(k) << "i" << endl;
        f    << "k (gamm)= " << real(k) << " + " << imag(k) << "i" << endl;
      };
  
    complex f0=-1i*k;  // forcing amplitude (-i k Phi0)
    complex err1=1.+1i; // dummy error value
    // int iteration = 1; not used for final run
    // while (abs(err1)> 0.02) { //not used for final run
  
    //************************************************************//
    //************************************************************//
    // Solve the problem of density
    //************************************************************//
    //************************************************************//
    //Define FE space for density
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Solving the problem of density [1/8]" << endl;
        f    << "***** Solving the problem of density [1/8]" << endl;
      };
    // Th: area mesh (fluid area)
    fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];// variables & test functions
    //------------------------------------------------------------
    // Density problem
    // dx(f): df/dx
    // int2d(Th)(f): 2d integral
    // on(1,2,3,4,vyr=0): BC
    //------------------------------------------------------------
    /* // CONTINUITY EQN IN WEAK FORM (EQ. III) */
    /* problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) = */
    /*   int2d(Th)( eq3integrand(vxr, vxy, br, lr) )+ */
    /*   int2d(Th)( */
    /*             - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr */
    /*             - pr*(dx(uxr)+dy(uyr)) */
    /*             + 1i*k*pr*uxr */
    /*             + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr))) */
    /*             - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr)) */
    /*             + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr)) */
    /*             + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr)) */
    /*             + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr)) */
    /*             + eta*(k^2)*(vxr*uxr+vyr*uyr) */
    /*             + (zeta+1./3.*eta)*(k^2)*vxr*uxr */
    /*             ) */
    /*   - int2d(Th)(f0*uxr) */
    /*   + int2d(Th)( */
    /*               - 1i*omega*rho0*cp*tr*sr */
    /*               + 1i*omega*beta0*T0*pr*sr */
    /*               + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr)) */
    /*               + 2*1i*kappa*k*tr*dx(sr) */
    /*               + (k^2)*kappa*tr*sr */
    /*               ) */
    /*   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr) */
    /*   +on(1,2,3,4,vyr=0) */
    /*   +on(5,vxr=0,vyr=0,tr=0); */
    /* //------------------------------------------------------------ */
    /* nonlocalDensity;	//solve: get vx,vy,pr,tr,vr at every meshpoint, corresponding to omega, k */


    mesh Thjr = Thj; 
    // Solve the density system on the finer mesh Thj
    fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Solving the problem of density [2/8]" << endl;
        f    << "***** Solving the problem of density [2/8]" << endl;
      };
    problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
      int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
      int2d(Thjr)(
                  - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
                  - pjr*(dx(uxjr)+dy(uyjr))
                  + 1i*k*pjr*uxjr
                  + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
                  - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
                  + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
                  + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
                  + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
                  + eta*(k^2)*(vxjr*uxjr+vyjr*uyjr)
                  + (zeta+1./3.*eta)*(k^2)*vxjr*uxjr
                  )
      - int2d(Thjr)(f0*uxjr)
      + int2d(Thjr)(
                    - 1i*omega*rho0*cp*tjr*sjr
                    + 1i*omega*beta0*T0*pjr*sjr
                    + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
                    + 2*1i*kappa*k*tjr*dx(sjr)
                    + (k^2)*kappa*tjr*sjr
                    )
      + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
      +on(1,2,3,4,vyjr=0) // ? I don't want vyjr=0 to be here. I don't want Freefem to assume Neumann BC either.
      +on(5,vxjr=0,vyjr=0,tjr=0);

    nonlocaljDensity;

    real phir=int2d(Thjr)(1.)/(Vtot); //porosity from discretized area
    real Vfr=int2d(Thjr)(1.);
    complex Vxr=1./Vfr*int2d(Thjr)(vxjr); // averaged velocity, V
    complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
    rho=(f0-1i*k*Hr)/(-1i*omega*Vxr); //fluid rho.

    //************************************************************//
    //************************************************************//
    // Solve the problem of compressibility
    //************************************************************//
    //************************************************************//
    //Difine FE space for compressibility
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Solving the problem of compressibility [3/8]" << endl;
        f    << "***** Solving the problem of compressibility [3/8]" << endl;
      };
    fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

    // Compressibility problem
    problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
      int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
      int2d(Th)(
                - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
                - pc*(dx(uxc)+dy(uyc))
                + 1i*k*pc*uxc
                + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
                - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
                + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
                + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
                + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
                )
      + int2d(Th)(
                  - 1i*omega*rho0*cp*tc*sc
                  + 1i*omega*beta0*T0*pc*sc
                  + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
                  + 2*1i*kappa*k*tc*dx(sc)
                  )
      - int2d(Th)(beta0*T0*q0*sc)
      + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
      +on(1,2,3,4,vyc=0)
      +on(5,vxc=0,vyc=0,tc=0);
    nonlocalCompressibility;
    
    mesh Thjc=Thj;

    // Solve the compressibility system on the finer mesh Thj
    fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Solving the problem of compressibility [4/8]" << endl;
        f    << "***** Solving the problem of compressibility [4/8]" << endl;
      };
    problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
      int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
      int2d(Thjc)(
                  - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
                  - pjc*(dx(uxjc)+dy(uyjc))
                  + 1i*k*pjc*uxjc
                  + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
                  - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
                  + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
                  + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
                  + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
                  + eta*(k^2)*(vxjc*uxjc+vyjc*uyjc)
                  + (zeta+1./3.*eta)*(k^2)*vxjc*uxjc
                  )
      + int2d(Thjc)(
                    - 1i*omega*rho0*cp*tjc*sjc
                    + 1i*omega*beta0*T0*pjc*sjc
                    + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
                    + 2*1i*kappa*k*tjc*dx(sjc)
                    + (k^2)*kappa*tjc*sjc
                    )
      - int2d(Thjc)(beta0*T0*q0*sjc)
      + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
      +on(1,2,3,4,vyjc=0)
      +on(5,vxjc=0,vyjc=0,tjc=0);
    nonlocaljCompressibility;

    real phic=int2d(Thjc)(1.)/(Vtot);
    real Vfc=int2d(Thjc)(1.);
    complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
    complex B=1./Vfc*int2d(Thjc)(bjc);
    complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);

    chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);

    //************************************************************//
    //************************************************************//
    // Start  computing the derivatives
    //************************************************************//
    //************************************************************//
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Start  computing the derivatives - density [5/8]" << endl;
        f    << "***** Start  computing the derivatives - density [5/8]" << endl;
      };
    complex dk= 0.001*k;
    complex k1=k+dk;
    complex f01=-1i*k1;

    // Compute the density in k+dk, rho1
    fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

    problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
      int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
      int2d(Th)(
                - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
                - pr1*(dx(uxr1)+dy(uyr1))
                + 1i*k1*pr1*uxr1
                + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
                - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
                + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
                + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
                + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
                + eta*(k^2)*(vxr1*uxr1+vyr1*uyr1)
                + (zeta+1./3.*eta)*(k^2)*vxr1*uxr1
                )
      - int2d(Th)(f01*uxr1)
      + int2d(Th)(
                  - 1i*omega*rho0*cp*tr1*sr1
                  + 1i*omega*beta0*T0*pr1*sr1
                  + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
                  + 2*1i*kappa*k1*tr1*dx(sr1)
                  + (k^2)*kappa*tr1*sr1
                  )
      + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
      +on(1,2,3,4,vyr1=0)
      +on(5,vxr1=0,vyr1=0,tr1=0);
    nonlocalDensity1;

    mesh Thjr1=Thj;
    fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Start  computing the derivatives - density [6/8]" << endl;
        f    << "***** Start  computing the derivatives - density [6/8]" << endl;
      };
    problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
      int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
      int2d(Thjr1)(
                   - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
                   - pjr1*(dx(uxjr1)+dy(uyjr1))
                   + 1i*k1*pjr1*uxjr1
                   + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
                   - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
                   + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
                   + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
                   + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
                   + eta*(k^2)*(vxjr1*uxjr1+vyjr1*uyjr1)
                   + (zeta+1./3.*eta)*(k^2)*vxjr1*uxjr1
                   )
      - int2d(Thjr1)(f01*uxjr1)
      + int2d(Thjr1)(
                     - 1i*omega*rho0*cp*tjr1*sjr1
                     + 1i*omega*beta0*T0*pjr1*sjr1
                     + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
                     + 2*1i*kappa*k1*tjr1*dx(sjr1)
                     + (k^2)*kappa*tjr1*sjr1
                     )
      + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
      +on(1,2,3,4,vyjr1=0)
      +on(5,vxjr1=0,vyjr1=0,tjr1=0);
    nonlocalj1Density;


    real phir1=int2d(Thjr1)(1.)/(Vtot);
    real Vfr1=int2d(Thjr1)(1.);
    complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
    complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
    complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

    // Compute the compressibility in k+dk, chi1
    fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];
    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Start  computing the derivatives -  compressibility [7/8]" << endl;
        f    << "***** Start  computing the derivatives -  compressibility [7/8]" << endl;
      };

    problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
      int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
      int2d(Th)(
                - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
                - pc1*(dx(uxc1)+dy(uyc1))
                + 1i*k1*pc1*uxc1
                + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
                - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
                + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
                + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
                + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
                )
      + int2d(Th)(
                  - 1i*omega*rho0*cp*tc1*sc1
                  + 1i*omega*beta0*T0*pc1*sc1
                  + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
                  + 2*1i*kappa*k1*tc1*dx(sc1)
                  )
      - int2d(Th)(beta0*T0*q0*sc1)
      + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
      +on(1,2,3,4,vyc1=0)
      +on(5,vxc1=0,vyc1=0,tc1=0);
    nonlocalCompressibility1;
    
    mesh Thjc1=Thj;
    // error=0.002;
    fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
    Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];

    if(logging)
      { ofstream f(logfilename,append);
        cout << "***** Start  computing the derivatives -  compressibility [8/8]" << endl;
        f    << "***** Start  computing the derivatives -  compressibility [8/8]" << endl;
      };
/*     problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) = */
/*       int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+ */
/*       int2d(Thjc1)( */
/*                    - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1 */
/*                    - pjc1*(dx(uxjc1)+dy(uyjc1)) */
/*                    + 1i*k1*pjc1*uxjc1 */
/*                    + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1))) */
/*                    - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1)) */
/*                    + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1)) */
/*                    + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1)) */
/*                    + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1)) */
/*                    + eta*(k^2)*(vxjc1*uxjc1+vyjc1*uyjc1) */
/*                    + (zeta+1./3.*eta)*(k^2)*vxjc1*uxjc1 */
/*                    ) */
/*       + int2d(Thjc1)( */
/*                      - 1i*omega*rho0*cp*tjc1*sjc1 */
/*                      + 1i*omega*beta0*T0*pjc1*sjc1 */
/*                      + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1)) */
/*                      + 2*1i*kappa*k1*tjc1*dx(sjc1) */
/*                      + (k^2)*kappa*tjc1*sjc1 */
/*                      ) */
/*       - int2d(Thjc1)(beta0*T0*q0*sjc1) */
/*       + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1) */
/*       +on(1,2,3,4,vyjc1=0) */
/*       +on(5,vxjc1=0,vyjc1=0,tjc1=0); */
/*     nonlocalj1Compressibility; */

/*     real phic1=int2d(Thjc1)(1.)/(Vtot); */
/*     real Vfc1=int2d(Thjc1)(1.); */
/*     complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1); */
/*     complex B1=1./Vfc1*int2d(Thjc1)(bjc1); */
/*     complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1); */
/*     complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1); */

/*     //\************************************************************\// */
/*     //\************************************************************\// */
/*     // End  computing the derivatives, Print Results */
/*     //\************************************************************\// */
/*     //\************************************************************\// */
/*     complex Fw2 = omega^2-k^2./rho/chi; //this one works!! */
/*     complex F1w2= omega^2-k1^2./rho1/chi1; */

/*     complex F = Fw2;  */
/*     complex F1= F1w2; */
/*     complex Fp=(F1-F)/dk;  // simple finite difference for F' */
/*     complex s0Integrand  = Fp/F; */
/*     complex s1Integrand = k*Fp/F; */
/*     complex s2Integrand = k*k*Fp/F; */

/*     s0 = s0 + s0Integrand*gammp[jj];  */
/*     s1 = s1 + s1Integrand*gammp[jj];  */
/*     s2 = s2 + s2Integrand*gammp[jj];  */

/*     //------------------------------------------------------------ */
/*     //- Record rho and chi on the contour points to keep track */
/*     //------------------------------------------------------------ */
/*     string rhochioutname=filebase+"_rhochi.txt"; */
/*     { ofstream rhochi(rhochioutname,append); */
/*       /\* rhochi << "re(k)   im(k)   re(rho)   im(rho)   re(chi)   im(chi)" << endl;  *\/ */
/*       rhochi << real(k)  << "   " << imag(k)<< "   " << real(rho) << "   " << imag(rho) << "   " << real(chi) << "   " << imag(chi) << "   " << endl ; */
/*     }; */

/*   }//end for jj (k) */
/*   s0 = s0/(ngamm*1i); */
/*   s1 = s1/(ngamm*1i); */
/*   s2 = s2/(ngamm*1i); //integral is completed  */

/* }//end for ii (klpi) */

//--- Record Time  
cpu=clock()-cpu;

    if(logging)
      { ofstream f(logfilename,append);
        cout << "cpu: " << cpu << endl;
        f    << "cpu: " << cpu << endl;
      };
