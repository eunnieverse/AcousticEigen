//--------------------------------------------------------------------//
// Newton Iteration on an array of rigid cylinders in 2D 
// Compute the complex wavenumber k and phase velocity c
// 1st Mode 
// Created by Navid Nemati
// Modified by Yoonkyung Eunnie Lee 2015-06-10
//--------------------------------------------------------------------//
load "UMFPACK64";
load "medit";
real cpu=clock();
//--------------------------------------------------------------------//
//---Inputs
real L=1e-5;                    // pitch(m)
real phi00=0.9;                 // liquid volume fraction
real R=sqrt((1.-phi00)/pi)*L;   //(m)

real T0=293.; 			// Temperature [K]
real c0=331.+0.6*(T0-273.); 	// speed of sound at T0[m/s]
real rho00=1.2;	 		// air density [kg/m^3]	
real K0=rho00*c0^2;		// Bulk modulus = 1/chi0 [pressure unit N/m^2]
real nuh=2.15e-5;		// kappa/(rho0*Cp), [kappa:thermal conductivity, W/mK]
real nuv=1.5e-5;		// kinematic viscosity_v (not used) [m^2/s]
real Pr=0.697674418604651;	// Prandtle #
real Cp=1005.;			// Heat Capacity [Joule/kg K]
real Beta0=1./T0;		// Coeff. of thermal expansion [1/K]  
real gam=1.4;			// Cp/Cv 

//---air properties
real eta=nuv*rho00, rho0=rho00, cp=1005., kappa=nuh*rho00*Cp, gamma=1.4, chi0=1./K0; 
				//chi0: compressibility. 
real zeta=0.6*eta; 		// second(bulk) viscosity 
real phi0=1.; 			//Phi_0, pressure potential [N/m^2]
complex k; 			//complex wavenumber, [rad/m]

real beta0=sqrt(rho0*cp*chi0*(gamma-1)/T0); //=Beta0

//--------------------------------------------------------------------//
//---Coarse Mesh
int n=20, nedg=40; 		// number of mesh points on boundary
				// n on bloch(unit cell)
 				// nedg on cylinder

real x1=0., y1=0.;		// origin
real xMin=-L/2., xMax=L/2., yMin=-L/2., yMax=L/2.;  
real Lx=xMax-xMin, Ly=yMax-yMin; 
real Vtot=Lx*Ly;
//------------------------------------------------------------
// build geometry
border a1(t=yMax,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=3;};
border a3(t=yMin,yMax){x=xMax;y=t;label=2;};// output
border a4(t=xMax,xMin){x=t;y=yMax;label=4;};
border c1(t=0,2*pi){ x=x1+R*cos(t); y=y1+R*sin(t);label=5;};
//------------------------------------------------------------
// CREATE INITIAL MESH
mesh Th= buildmesh( a1(n)+a2(n)+a3(n)+a4(n)+c1(-1*nedg));
//------------------------------------------------------------
int nbpt = 100;  // frequency number of points 
string fileout="NewtCyl_Mode1_phi90_err002.txt";
//string fileout2="Valeur_k__Phi90_k.txt";

real klpi,pasklpi,klpimin=0.05,klpimax=5; 
// klpi: xaxis, kL/pi
// pasklpi: unit step in x
//pasklpi= (klpimax-klpimin)/(nbpt); //corrected:Eunnie
pasklpi= (klpimax-klpimin)/(nbpt-1);

//real freq,pasfreq,fmin =3.4000000000e+01 ,fmax =8575 ;
//pasf = (fmax-fmin)/(nbpt);
real freq; 	//  [1/s]
real omega;	//  [rad/s]

complex[int] tabk(nbpt); //k tabulated (initial guess) 

//initial k for 100 points from klp=0.05 to 5
tabk(0)=15204.0809+4648.09168i;
tabk(1)=15867.3781+4681.17744i;
tabk(2)=16563.4288+4714.95859i;
tabk(3)=17293.6991+4749.58923i;
tabk(4)=18059.7155+4785.2247i;
tabk(5)=18863.0681+4822.02113i;
tabk(6)=19705.4144+4860.13488i;
tabk(7)=20588.4831+4899.72215i;
tabk(8)=21514.078+4940.93851i;
tabk(9)=22484.0824+4983.93847i;
tabk(10)=23500.4634+5028.8751i;
tabk(11)=24565.277+5075.89963i;
tabk(12)=25680.6727+5125.16104i;
tabk(13)=26848.8989+5176.80576i;
tabk(14)=28072.3086+5230.97729i;
tabk(15)=29353.3652+5287.81594i;
tabk(16)=30694.6488+5347.45859i;
tabk(17)=32098.863+5410.03847i;
tabk(18)=33568.8417+5475.68506i;
tabk(19)=35107.5568+5544.52406i;
tabk(20)=36718.1263+5616.6775i;
tabk(21)=38403.8222+5692.2639i;
tabk(22)=40168.0802+5771.39867i;
tabk(23)=42014.5088+5854.19465i;
tabk(24)=43946.8995+5940.76293i;
tabk(25)=45969.2379+6031.21382i;
tabk(26)=48085.7148+6125.65825i;
tabk(27)=50300.7387+6224.20943i;
tabk(28)=52618.9486+6326.98494i;
tabk(29)=55045.2282+6434.10934i;
tabk(30)=57584.7205+6545.71719i;
tabk(31)=60242.8436+6661.9568i;
tabk(32)=63025.308+6782.99459i;
tabk(33)=65938.135+6909.02031i;
tabk(34)=68987.6761+7040.25313i;
tabk(35)=72180.6356+7176.94889i;
tabk(36)=75524.0939+7319.40873i;
tabk(37)=79025.5348+7467.98927i;
tabk(38)=82692.8753+7623.11507i;
tabk(39)=86534.5002+7785.29376i;
tabk(40)=90559.3018+7955.13486i;
tabk(41)=94776.7273+8133.37358i;
tabk(42)=99196.8345+8320.90145i;
tabk(43)=103830.3605+8518.806516i;
tabk(44)=108688.8063+8728.42723i;
tabk(45)=113784.544+8951.426081i;
tabk(46)=119130.9543+9189.892569i;
tabk(47)=124742.6077+9446.490456i;
tabk(48)=130635.5071+9724.673701i;
tabk(49)=136827.4207+10029.01189i;
tabk(50)=143338.3486+10365.69606i;
tabk(51)=150191.1913+10743.35307i;
tabk(52)=157412.7272+11174.41119i;
tabk(53)=165035.0587+11677.50137i;
tabk(54)=173097.7432+12281.9228i;
tabk(55)=181650.7359+13036.5106i;
tabk(56)=190757.299+14028.61421i;
tabk(57)=200490.084+15427.85128i;
tabk(58)=210879.7687+17588.85416i;
tabk(59)=221610.4202+21209.15339i;
tabk(60)=231163.3875+26777.48749i;
tabk(61)=237833.7814+32563.85072i;
tabk(62)=242320.9139+36359.54955i;
tabk(63)=245897.4904+37342.64929i;
tabk(64)=249501.6447+34879.14768i;
tabk(65)=254665.1355+27469.77293i;
tabk(66)=269090.4576+14952.48232i;
tabk(67)=289921.0909+11939.86831i;
tabk(68)=308128.6267+11983.11477i;
tabk(69)=325664.5935+12502.05669i;
tabk(70)=343318.005+13178.9316i;
tabk(71)=361456.648+13953.66574i;
tabk(72)=380312.0411+14826.06107i;
tabk(73)=400075.7046+15823.47802i;
tabk(74)=420950.586+17004.9131i;
tabk(75)=443201.7685+18504.07545i;
tabk(76)=467187.5381+20738.5481i;
tabk(77)=492214.9664+24861.75761i;
tabk(78)=517744.7698+26858.49095i;
tabk(79)=552336.7876+29707.4287i;
tabk(80)=602584.5541+39194.03588i;
tabk(81)=705947.2275+81770.14576i;
tabk(82)=563828.9263+38273.09375i;
tabk(83)=626919.5438+62918.19386i;
tabk(84)=634826.9641+94208.24989i;
tabk(85)=624372.2762+89182.48228i;
tabk(86)=640521.6571+36846.80066i;
tabk(87)=710049.795+26391.50732i;
tabk(88)=749028.0876+39181.25685i;
tabk(89)=788833.0601+28709.15616i;
tabk(90)=844548.3995+35829.297i;
tabk(91)=668943.2227+43921.2023i;
tabk(92)=748507.1518+36113.62071i;
tabk(93)=824322.2783+42416.366i;
tabk(94)=894017.3957+74806.72913i;
tabk(95)=1014302.9763+35903.581733i;
tabk(96)=1002788.3849+25803.110938i;
tabk(97)=1087392.2319+52898.899456i;
tabk(98)=1118436.9457+21539.459345i;
tabk(99)=1199436.3433+13404.75963i;                
           
           
for (int ii=0; ii<nbpt ; ii++) {
//klpi= klpimin+(pasklpi*ii); //linear spacing for x
klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));//log spaced x
cout << "klpi: " << klpi << endl;

freq= (c0*klpi)/(2*Lx); 
omega=2*pi*freq;
complex q0=-1i*omega*phi0;

k=tabk(ii); //initial guess (k will be updated in the code)
cout << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;

complex f0=-1i*k;  //forcing amplitude (-i k Phi0)
complex err1=1.+1i; //dummy error value
int iteration = 1;
while (abs(err1)> 0.02) {
//*****************************************************************  Solve the problem of density ******************************************************* 
//Define FE space for density
cout << "***** Solving the problem of density [1/8]" << endl;
// Th: area mesh (fluid area) 

fespace Uhr(Th,P2,periodic=[[1,y],[2,y]]); //U:velocity, r:rho (not used)
fespace Phr(Th,P1,periodic=[[1,y],[2,y]]); //P:Pressure, P1 (polynomial order 1 precision) (not used) 

fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];
// variables & test functions 

//------------------------------------------------------------
// Density problem

// dx(f): df/dx 
// int2d(Th)(f): 2d integral 
// on(1,2,3,4,vyr=0): BC
//------------------------------------------------------------
// CONTINUITY EQN IN WEAK FORM (EQ. III) 
problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) =
int2d(Th)(1i*omega*br*lr-dx(vxr)*lr-dy(vyr)*lr-1i*k*vxr*lr)+
int2d(Th)(
        - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr
        - pr*(dx(uxr)+dy(uyr))
        + 1i*k*pr*uxr
        + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr)))
        - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr))
        + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr))
        + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr))
        + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr))
        )
      - int2d(Th)(f0*uxr)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr*sr
        + 1i*omega*beta0*T0*pr*sr
        + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr))
        + 2*1i*kappa*k*tr*dx(sr)

        )
   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr)
+on(1,2,3,4,vyr=0)
+on(5,vxr=0,vyr=0,tr=0);
//------------------------------------------------------------
nonlocalDensity;	//solve: get vx,vy,pr,tr,vr at every meshpoint, corresponding to omega, k 

mesh Thjr=Th;
// real errorr=0.005;
// real errorc=0.005;
 real errorr=0.002;
 real errorc=0.002;

// Creation of the finer mesh Thj          
Thjr=adaptmesh(Thjr,
 [real(vxr),real(vyr),imag(vxr),imag(vyr)],[real(tr),imag(tr)],[real(br),imag(br)]
 ,err=errorr,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the density system on the finer mesh Thj

fespace Uhjr(Thjr,P2,periodic=[[1,y],[2,y]]);
fespace Phjr(Thjr,P1,periodic=[[1,y],[2,y]]);
fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];

cout << "***** Solving the problem of density [2/8]" << endl;
problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
int2d(Thjr)(
        - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
        - pjr*(dx(uxjr)+dy(uyjr))
        + 1i*k*pjr*uxjr
        + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
        - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
        + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
        + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
        + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
        )
      - int2d(Thjr)(f0*uxjr)
   + int2d(Thjr)(
        - 1i*omega*rho0*cp*tjr*sjr
        + 1i*omega*beta0*T0*pjr*sjr
        + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
        + 2*1i*kappa*k*tjr*dx(sjr)
        )
   + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
+on(1,2,3,4,vyjr=0) // ? I don't want vyjr=0 to be here. I don't want Freefem to assume Neumann BC either. 
+on(5,vxjr=0,vyjr=0,tjr=0);

nonlocaljDensity;

real phir=int2d(Thjr)(1.)/(Vtot); //porosity from discretized area 
real Vfr=int2d(Thjr)(1.);
complex Vxr=1./Vfr*int2d(Thjr)(vxjr); // averaged velocity, V   
complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
complex rho=(f0-1i*k*Hr)/(-1i*omega*Vxr); //fluid rho. 



//*****************************************************************  Solve the problem of compressibility *******************************************************

//Difine FE space for compressibility
cout << "***** Solving the problem of compressibility [3/8]" << endl;
fespace Uhc(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

// Compressibility problem
problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
int2d(Th)(
        - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
        - pc*(dx(uxc)+dy(uyc))
        + 1i*k*pc*uxc
        + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
        - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
        + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
        + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
        + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc*sc
        + 1i*omega*beta0*T0*pc*sc
        + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
        + 2*1i*kappa*k*tc*dx(sc)
        )
   - int2d(Th)(beta0*T0*q0*sc) //FORCING
   + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
+on(1,2,3,4,vyc=0)
+on(5,vxc=0,vyc=0,tc=0);
nonlocalCompressibility;             
    
mesh Thjc=Th;
//real error=0.002;

// Creatioin of finer mesh 
Thjc=adaptmesh(Thjc,
 [real(vxc),real(vyc),imag(vxc),imag(vyc)],[real(tc),imag(tc)],[real(bc),imag(bc)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the compressibility system on the finer mesh Thj

fespace Uhjc(Thjc,P2,periodic=[[1,y],[2,y]]);
fespace Phjc(Thjc,P1,periodic=[[1,y],[2,y]]);
fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];

cout << "***** Solving the problem of compressibility [4/8]" << endl;
problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
int2d(Thjc)(
        - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
        - pjc*(dx(uxjc)+dy(uyjc))
        + 1i*k*pjc*uxjc
        + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
        - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
        + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
        + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
        + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
        )
   + int2d(Thjc)(
        - 1i*omega*rho0*cp*tjc*sjc
        + 1i*omega*beta0*T0*pjc*sjc
        + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
        + 2*1i*kappa*k*tjc*dx(sjc)
        )
	- int2d(Thjc)(beta0*T0*q0*sjc)
   + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
+on(1,2,3,4,vyjc=0)
+on(5,vxjc=0,vyjc=0,tjc=0);
nonlocaljCompressibility;

real phic=int2d(Thjc)(1.)/(Vtot);
real Vfc=int2d(Thjc)(1.);
complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
complex B=1./Vfc*int2d(Thjc)(bjc);
complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);

complex chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);



	
 



//               ***************************************************** Start  computing the derivatives  ************************************************

cout << "***** Start  computing the derivatives - density [5/8]" << endl;
complex dk= 0.001*k;
complex k1=k+dk;
complex f01=-1i*k1;

// Compute the density in k+dk, rho1
fespace Uhr1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phr1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
int2d(Th)(
        - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
        - pr1*(dx(uxr1)+dy(uyr1))
        + 1i*k1*pr1*uxr1
        + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
        - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
        + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
        + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
        + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
        )
      - int2d(Th)(f01*uxr1)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr1*sr1
        + 1i*omega*beta0*T0*pr1*sr1
        + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
        + 2*1i*kappa*k1*tr1*dx(sr1)

        )
   + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
+on(1,2,3,4,vyr1=0)
+on(5,vxr1=0,vyr1=0,tr1=0);
nonlocalDensity1;

mesh Thjr1=Th;
//real error=0.002;
Thjr1=adaptmesh(Thjr1,
 [real(vxr1),real(vyr1),imag(vxr1),imag(vyr1)],[real(tr1),imag(tr1)],[real(br1),imag(br1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjr1(Thjr1,P2,periodic=[[1,y],[2,y]]);
fespace Phjr1(Thjr1,P1,periodic=[[1,y],[2,y]]);
fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];

cout << "***** Start  computing the derivatives - density [6/8]" << endl;
problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
int2d(Thjr1)(
        - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
        - pjr1*(dx(uxjr1)+dy(uyjr1))
        + 1i*k1*pjr1*uxjr1
        + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
        - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
        + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
        + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
        + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
        )
      - int2d(Thjr1)(f01*uxjr1)
   + int2d(Thjr1)(
        - 1i*omega*rho0*cp*tjr1*sjr1
        + 1i*omega*beta0*T0*pjr1*sjr1
        + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
        + 2*1i*kappa*k1*tjr1*dx(sjr1)
        )
   + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
+on(1,2,3,4,vyjr1=0)
+on(5,vxjr1=0,vyjr1=0,tjr1=0);
nonlocalj1Density;


real phir1=int2d(Thjr1)(1.)/(Vtot);
real Vfr1=int2d(Thjr1)(1.);
complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

	

// Compute the compressibility in k+dk, chi1

fespace Uhc1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];

cout << "***** Start  computing the derivatives - compressibility [7/8]" << endl;
problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
int2d(Th)(
        - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
        - pc1*(dx(uxc1)+dy(uyc1))
        + 1i*k1*pc1*uxc1
        + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
        - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
        + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
        + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
        + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc1*sc1
        + 1i*omega*beta0*T0*pc1*sc1
        + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
        + 2*1i*kappa*k1*tc1*dx(sc1)
        )
   - int2d(Th)(beta0*T0*q0*sc1) 
   + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
+on(1,2,3,4,vyc1=0)
+on(5,vxc1=0,vyc1=0,tc1=0);
nonlocalCompressibility1;             
    
mesh Thjc1=Th;
// error=0.002;

Thjc1=adaptmesh(Thjc1,
 [real(vxc1),real(vyc1),imag(vxc1),imag(vyc1)],[real(tc1),imag(tc1)],[real(bc1),imag(bc1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjc1(Thjc1,P2,periodic=[[1,y],[2,y]]);
fespace Phjc1(Thjc1,P1,periodic=[[1,y],[2,y]]);
fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];

cout << "***** Start  computing the derivatives - compressibility [8/8]" << endl;
problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) =
int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+
int2d(Thjc1)(
        - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1
        - pjc1*(dx(uxjc1)+dy(uyjc1))
        + 1i*k1*pjc1*uxjc1
        + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1)))
        - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1))
        + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1))
        + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1))
        + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1))
        )
   + int2d(Thjc1)(
        - 1i*omega*rho0*cp*tjc1*sjc1
        + 1i*omega*beta0*T0*pjc1*sjc1
        + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1))
        + 2*1i*kappa*k1*tjc1*dx(sjc1)
        )
	- int2d(Thjc1)(beta0*T0*q0*sjc1)
   + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1)
+on(1,2,3,4,vyjc1=0)
+on(5,vxjc1=0,vyjc1=0,tjc1=0);
nonlocalj1Compressibility;

real phic1=int2d(Thjc1)(1.)/(Vtot);
real Vfc1=int2d(Thjc1)(1.);
complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1);
complex B1=1./Vfc1*int2d(Thjc1)(bjc1);
complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1);
complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1);





//            ************************************************* End computing the derivatives ***********************************************


complex F= rho*chi*omega^2-k^2;
complex F1= rho1*chi1*omega^2-k1^2;
complex Fp=(F1-F)/dk; 

complex kout=k-F/Fp; //Newton Raphson

err1=(kout-k)/k;
k=kout;

// rho(omega,k_final) should be computed. 

// Affichage du nombre d'itération
cout << "Iteration numero: " << iteration << endl;
iteration=iteration+1;
// Affichage de la valeur de k
cout << "k=" << k << endl;
// Affichage de l'erreur
cout << "Erreur : " << abs(err1) << endl;
// Sauvegarde valeur de k
//ofstream gg(fileout2,append);
//	   {
//	   int nold=gg.precision(10);
//   
//    	   gg.scientific << real(k) << " "<< imag(k) <<endl ;
//   	   }
//complex C=omega/k;
  } //end while

ofstream ff(fileout,append); 
	   {
	   int nold=ff.precision(10);
   
    	   ff.scientific << klpi << " "<< real(k) << " "<< imag(k) <<" "<< real(omega/k) << " " << imag(omega/k) <<endl ;
   	   }
      
}//end for 

cpu=clock()-cpu;
cout << "cpu: " << cpu << endl;
