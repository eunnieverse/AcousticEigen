// Compute dynamic density using the classical local theory
//  dimensionless 
// geometry: 2D network of rigid cylinders  
//OK

load "UMFPACK64";
load "medit";
real cpu=clock();

//Inputs
real L=1e-5; // lengthe of the periodic cell (m)
real phi0=0.9; 
real R=sqrt((1.-phi0)/pi)*L; // raduis of the cylinders
 
// Outputs
string fileout="rhoLocal.txt";
string fileoutdelta="deltavLocal.txt";
real T0=293.;
real c0=331.+0.6*(T0-273.);
real rho0=1.2;
real K0=rho0*c0^2;
real nuh=2.15e-5;
real nuv=1.5e-5;
real Pr=0.697674418604651;
real cp=1005.;
real Beta0=1./T0;
real gam=1.4;
real eta=nuv*rho0, kappa=nuh*rho0*cp, gamma=1.4, chi0=1./K0; // air properties

int n=10, nedg=20; // mesh properties

real x1=0., y1=0.;
real xMin=-L/2., xMax=L/2., yMin=-L/2., yMax=L/2.;
real Lx=xMax-xMin, Ly=yMax-yMin;
real Vtot=Lx*Ly, dp=Lx, f0=dp/Lx;
// build geometry
border a1(t=yMax,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=3;};
border a3(t=yMin,yMax){x=xMax;y=t;label=2;};// output
border a4(t=xMax,xMin){x=t;y=yMax;label=4;};
border c1(t=0,2*pi){ x=x1+R*cos(t); y=y1+R*sin(t);label=5;};

mesh Th= buildmesh( a1(n)+a2(n)+a3(n)+a4(n)+c1(-1*nedg));

//real delta=sqrt((2*eta)/(rho0*omega)); //viscous penetration length
//real delta1=sqrt((2*eta)/(rho0*omega))/R;

// Define FEM space with periodic boundary conditions
fespace Uh(Th,P2,periodic=[[1,y],[2,y]]);
fespace Ph(Th,P1,periodic=[[1,y],[2,y]]);
fespace Wh(Th,[P2,P2,P1],periodic=[[1,y],[2,y]]);
Wh<complex>  [u,v,p],[uu,vv,pp];

int nbpt = 100;  // number of points
real klpi,pasklpi,klpimin=0.05,klpimax=5; // Normalized frequency: kL/pi= omega*L/c0/pi
real freq;
real omega;
real Omega;
// Plot the mesh
//plot(Th,wait=1);

for (int ii=0; ii<nbpt ; ii++) {
klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1.)));  // logarithmic step

//pasklpi= (klpimax-klpimin)/(nbpt);
//klpi=klpimin+(pasklpi*ii);   // linear step
 
cout << "klpi: " << klpi << endl;
freq= (c0*klpi)/(2.*Lx);
omega=2.*pi*freq;
Omega=rho0*omega/eta;

problem stokes([u,v,p],[uu,vv,pp]) =
int2d(Th)(-p*pp*1e-15
    -1i*Omega*u*uu-1i*Omega*v*vv
      + dx(u)*dx(uu)+dy(u)*dy(uu) + dx(v)*dx(vv)+ dy(v)*dy(vv)
      - p*(dx(uu) + dy(vv)) 
      + pp*(dx(u)+dy(v)))
    - int2d(Th)(uu)
    + on(1,2,v=0) 
   + on(3,4,v=0)
 + on(5,u=0,v=0);
stokes;
          

// adaptmesh
mesh Thj=Th;
real error=0.001;

Thj=adaptmesh(Thj,
 [real(u),real(v),imag(u),imag(v)]
 ,err=error,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the problem on the finer mesh
fespace Uhj(Thj,P2,periodic=[[1,y],[2,y]]);
fespace Phj(Thj,P1,periodic=[[1,y],[2,y]]);
fespace Whj(Thj,[P2,P2,P1],periodic=[[1,y],[2,y]]);
Whj<complex>  [uj,vj,pj],[uuj,vvj,ppj];

problem stokesj([uj,vj,pj],[uuj,vvj,ppj]) =
int2d(Thj)(-pj*ppj*1e-15
    -1i*Omega*uj*uuj-1i*Omega*vj*vvj
      + dx(uj)*dx(uuj)+dy(uj)*dy(uuj) + dx(vj)*dx(vvj)+ dy(vj)*dy(vvj)
      - pj*(dx(uuj) + dy(vvj)) 
      + ppj*(dx(uj)+dy(vj)))
    - int2d(Thj)(uuj)
    + on(1,2,vj=0) 
   + on(3,4,vj=0)
 + on(5,uj=0,vj=0);
stokesj;
 
real phi=int2d(Thj)(1.)/(Vtot); // porosity
real Vf=int2d(Thj)(1.);   // volume of the fluid
real lct=2.*Vf/int1d(Thj,5)(1.);
complex U=1./Vf*int2d(Thj)(uj); // average of the velocity
complex k=U;
complex alpha=-1./(1i*Omega*k); // tortuosity
complex rho=rho0*alpha;  // effective local density
//comlex alpha0=-1./(1i*Omega0*k);
complex sig=eta/k;
 real deltav=sqrt((2.*eta)/(rho0*omega)); //removed 1/R on 2015.06.29 deltav has unit of length. 

ofstream ff(fileout,append);
	{   
	int nold=ff.precision(10);

    	ff.scientific << klpi << " "<<  real(rho) << " " << imag(rho)  << " "<<  real(alpha) << " " << imag(alpha)  <<endl ;
	}
        ofstream ffdelta(fileoutdelta,append); 
        {
        ffdelta.scientific << klpi << "  " << deltav <<endl; 
        }

}

cpu=clock()-cpu;
cout << "cpu: " << cpu << endl;


//cout << "ndofs: " <<  ndofs << endl;





