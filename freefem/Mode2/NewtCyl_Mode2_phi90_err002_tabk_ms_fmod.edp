//--------------------------------------------------------------------//
// Newton Iteration on an array of rigid cylinders in 2D 
// Compute the complex wavenumber k and phase velocity c
// 2nd Mode , modified F= rho*chi*omega^2-k^2
// Created by Navid Nemati
// Modified by Yoonkyung Eunnie Lee 2015-06-23
//--------------------------------------------------------------------//
load "UMFPACK64";
load "medit";
real cpu=clock();
//--------------------------------------------------------------------//
string filebase="NewtCyl_Mode2_phi90_err002_tabk_ms_fmod";
//---Inputs
real L=1e-5;                    // pitch(m)
real phi00=0.9;                 // liquid volume fraction
real R=sqrt((1.-phi00)/pi)*L;   //(m)

real T0=293.; 			// Temperature [K]
real c0=331.+0.6*(T0-273.); 	// speed of sound at T0[m/s]
real rho00=1.2;	 		// air density [kg/m^3]	
real K0=rho00*c0^2;		// Bulk modulus = 1/chi0 [pressure unit N/m^2]
real nuh=2.15e-5;		// kappa/(rho0*Cp), [kappa:thermal conductivity, W/mK]
real nuv=1.5e-5;		// kinematic viscosity_v (not used) [m^2/s]
real Pr=0.697674418604651;	// Prandtle #
real Cp=1005.;			// Heat Capacity [Joule/kg K]
real Beta0=1./T0;		// Coeff. of thermal expansion [1/K]  
real gam=1.4;			// Cp/Cv 

//---air properties
real eta=nuv*rho00, rho0=rho00, cp=1005., kappa=nuh*rho00*Cp, gamma=1.4, chi0=1./K0;

//real eta=1.84e-05, rho0=1.2, cp=1005., kappa=0.0262, gamma=1.4, chi0=0.7e-5, c0=343., T0=293.; // air properties

//real zeta=0.6*eta; 		// second(bulk) viscosity 
real zeta=0.;
real phi0=1.; 			//Phi_0, pressure potential [N/m^2]
complex k; 			//complex wavenumber, [rad/m]

real beta0=sqrt(rho0*cp*chi0*(gamma-1)/T0); //=Beta0


//--------------------------------------------------------------------//
//---Coarse Mesh
int n=10, nedg=20; 		// number of mesh points on boundary
				// n on bloch(unit cell)
 				// nedg on cylinder

real x1=0., y1=0.;
real xMin=-L/2., xMax=L/2., yMin=-L/2., yMax=L/2.;
real Lx=xMax-xMin, Ly=yMax-yMin;
real Vtot=Lx*Ly;
//------------------------------------------------------------
// build geometry
border a1(t=yMax,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=3;};
border a3(t=yMin,yMax){x=xMax;y=t;label=2;};// output
border a4(t=xMax,xMin){x=t;y=yMax;label=4;};
border c1(t=0,2*pi){ x=x1+R*cos(t); y=y1+R*sin(t);label=5;};
//------------------------------------------------------------
// CREATE INITIAL MESH
mesh Th= buildmesh( a1(n)+a2(n)+a3(n)+a4(n)+c1(-1*nedg));
//------------------------------------------------------------
int nbpt = 100;  // frequency number of points 
string fileout=filebase+".txt";
//string fileout2="Valeur_k_Phi90_MODE2.txt";

real klpi,pasklpi,klpimin=0.05,klpimax=5;
pasklpi= (klpimax-klpimin)/(nbpt);
//real freq,pasfreq,fmin =3.4000000000e+01 ,fmax =8575 ;
//pasf = (fmax-fmin)/(nbpt);
real freq; 
real omega;


complex[int] tabk(nbpt);
//initial k for 100 points from klp=0.05 to 2
tabk(0)=289251.700000+(460157.700000i);    // Vec_kaLpi=0.050000
tabk(1)=298416.700000+(466526.000000i);    // Vec_kaLpi=0.052381
tabk(2)=307779.100000+(473127.400000i);    // Vec_kaLpi=0.054875
tabk(3)=317342.500000+(479966.200000i);    // Vec_kaLpi=0.057488
tabk(4)=327110.500000+(487046.400000i);    // Vec_kaLpi=0.060225
tabk(5)=337086.800000+(494372.500000i);    // Vec_kaLpi=0.063093
tabk(6)=347275.200000+(501948.800000i);    // Vec_kaLpi=0.066097
tabk(7)=357680.000000+(509779.600000i);    // Vec_kaLpi=0.069244
tabk(8)=368305.200000+(517869.500000i);    // Vec_kaLpi=0.072541
tabk(9)=379155.500000+(526223.200000i);    // Vec_kaLpi=0.075996
tabk(10)=390235.200000+(534845.100000i);    // Vec_kaLpi=0.079614
tabk(11)=401549.200000+(543740.000000i);    // Vec_kaLpi=0.083405
tabk(12)=413102.600000+(552912.800000i);    // Vec_kaLpi=0.087376
tabk(13)=424900.400000+(562368.200000i);    // Vec_kaLpi=0.091537
tabk(14)=436948.200000+(572111.300000i);    // Vec_kaLpi=0.095896
tabk(15)=449251.400000+(582147.300000i);    // Vec_kaLpi=0.100462
tabk(16)=461816.200000+(592481.400000i);    // Vec_kaLpi=0.105245
tabk(17)=474648.700000+(603119.000000i);    // Vec_kaLpi=0.110256
tabk(18)=487755.000000+(614065.600000i);    // Vec_kaLpi=0.115506
tabk(19)=501141.800000+(625326.900000i);    // Vec_kaLpi=0.121006
tabk(20)=514816.100000+(636909.100000i);    // Vec_kaLpi=0.126768
tabk(21)=528784.800000+(648818.100000i);    // Vec_kaLpi=0.132804
tabk(22)=543055.200000+(661060.200000i);    // Vec_kaLpi=0.139128
tabk(23)=557634.800000+(673642.300000i);    // Vec_kaLpi=0.145753
tabk(24)=572531.200000+(686571.100000i);    // Vec_kaLpi=0.152693
tabk(25)=587752.800000+(699853.500000i);    // Vec_kaLpi=0.159963
tabk(26)=603307.500000+(713497.000000i);    // Vec_kaLpi=0.167580
tabk(27)=619203.800000+(727509.100000i);    // Vec_kaLpi=0.175560
tabk(28)=635450.500000+(741897.600000i);    // Vec_kaLpi=0.183919
tabk(29)=652056.300000+(756670.400000i);    // Vec_kaLpi=0.192676
tabk(30)=669030.500000+(771836.000000i);    // Vec_kaLpi=0.201851
tabk(31)=686382.200000+(787402.700000i);    // Vec_kaLpi=0.211462
tabk(32)=704120.900000+(803379.400000i);    // Vec_kaLpi=0.221531
tabk(33)=500597.800000+(807608.000000i);    // Vec_kaLpi=0.232079
tabk(34)=504048.400000+(809570.300000i);    // Vec_kaLpi=0.243130
tabk(35)=507441.600000+(811328.700000i);    // Vec_kaLpi=0.254707
tabk(36)=510724.800000+(812885.800000i);    // Vec_kaLpi=0.266835
tabk(37)=513848.600000+(814228.400000i);    // Vec_kaLpi=0.279541
tabk(38)=516772.900000+(815325.600000i);    // Vec_kaLpi=0.292851
tabk(39)=519476.700000+(816130.800000i);    // Vec_kaLpi=0.306795
tabk(40)=521964.800000+(816590.300000i);    // Vec_kaLpi=0.321404
tabk(41)=524272.200000+(816655.900000i);    // Vec_kaLpi=0.336707
tabk(42)=526457.000000+(816299.200000i);    // Vec_kaLpi=0.352740
tabk(43)=528586.400000+(815521.100000i);    // Vec_kaLpi=0.369536
tabk(44)=530719.900000+(814349.200000i);    // Vec_kaLpi=0.387132
tabk(45)=532897.900000+(812827.900000i);    // Vec_kaLpi=0.405565
tabk(46)=535138.800000+(811004.500000i);    // Vec_kaLpi=0.424877
tabk(47)=537443.500000+(808919.800000i);    // Vec_kaLpi=0.445107
tabk(48)=539802.200000+(806603.100000i);    // Vec_kaLpi=0.466302
tabk(49)=542200.000000+(804071.800000i);    // Vec_kaLpi=0.488505
tabk(50)=544621.300000+(801332.800000i);    // Vec_kaLpi=0.511765
tabk(51)=547051.700000+(798384.100000i);    // Vec_kaLpi=0.536134
tabk(52)=549478.600000+(795216.800000i);    // Vec_kaLpi=0.561662
tabk(53)=551892.000000+(791816.700000i);    // Vec_kaLpi=0.588406
tabk(54)=554284.200000+(788163.900000i);    // Vec_kaLpi=0.616423
tabk(55)=556649.700000+(784234.900000i);    // Vec_kaLpi=0.645775
tabk(56)=558984.400000+(780001.300000i);    // Vec_kaLpi=0.676524
tabk(57)=561286.400000+(775430.600000i);    // Vec_kaLpi=0.708737
tabk(58)=563555.100000+(770485.500000i);    // Vec_kaLpi=0.742484
tabk(59)=565791.000000+(765123.900000i);    // Vec_kaLpi=0.777838
tabk(60)=567996.200000+(759298.300000i);    // Vec_kaLpi=0.814875
tabk(61)=570173.700000+(752954.800000i);    // Vec_kaLpi=0.853676
tabk(62)=572327.400000+(746032.400000i);    // Vec_kaLpi=0.894325
tabk(63)=574462.200000+(738461.800000i);    // Vec_kaLpi=0.936909
tabk(64)=576583.800000+(730163.600000i);    // Vec_kaLpi=0.981520
tabk(65)=578698.800000+(721046.700000i);    // Vec_kaLpi=1.028256
tabk(66)=580814.500000+(711005.400000i);    // Vec_kaLpi=1.077217
tabk(67)=582939.600000+(699916.300000i);    // Vec_kaLpi=1.128510
tabk(68)=585083.700000+(687633.800000i);    // Vec_kaLpi=1.182245
tabk(69)=587258.200000+(673984.100000i);    // Vec_kaLpi=1.238538
tabk(70)=589476.900000+(658757.700000i);    // Vec_kaLpi=1.297512
tabk(71)=591756.500000+(641697.400000i);    // Vec_kaLpi=1.359294
tabk(72)=594117.800000+(622482.200000i);    // Vec_kaLpi=1.424018
tabk(73)=596588.200000+(600701.900000i);    // Vec_kaLpi=1.491824
tabk(74)=599203.800000+(575817.200000i);    // Vec_kaLpi=1.562858
tabk(75)=602015.500000+(547092.000000i);    // Vec_kaLpi=1.637275
tabk(76)=605097.100000+(513472.100000i);    // Vec_kaLpi=1.715235
tabk(77)=608561.400000+(473343.800000i);    // Vec_kaLpi=1.796907
tabk(78)=612586.900000+(423998.100000i);    // Vec_kaLpi=1.882468
tabk(79)=617421.700000+(360247.700000i);    // Vec_kaLpi=1.972103
tabk(80)=622654.200000+(270678.200000i);    // Vec_kaLpi=2.066006
tabk(81)=625505.800000+(147331.800000i);    // Vec_kaLpi=2.164381
tabk(82)=311855.200000+(178743.700000i);    // Vec_kaLpi=2.267439
tabk(83)=349297.000000+(179419.700000i);    // Vec_kaLpi=2.375405
tabk(84)=406279.300000+(170874.500000i);    // Vec_kaLpi=2.488512
tabk(85)=459052.600000+(157635.800000i);    // Vec_kaLpi=2.607004
tabk(86)=545058.200000+(137017.000000i);    // Vec_kaLpi=2.731139
tabk(87)=601295.000000+(176396.300000i);    // Vec_kaLpi=2.861184
tabk(88)=620757.800000+(176217.900000i);    // Vec_kaLpi=2.997421
tabk(89)=642511.900000+(134781.800000i);    // Vec_kaLpi=3.140146
tabk(90)=737548.100000+(56446.430000i);    // Vec_kaLpi=3.289666
tabk(91)=470848.700000+(63429.160000i);    // Vec_kaLpi=3.446306
tabk(92)=528452.400000+(70061.590000i);    // Vec_kaLpi=3.610405
tabk(93)=576717.100000+(94845.920000i);    // Vec_kaLpi=3.782317
tabk(94)=588120.000000+(107936.100000i);    // Vec_kaLpi=3.962414
tabk(95)=517413.600000+(55365.470000i);    // Vec_kaLpi=4.151088
tabk(96)=756299.000000+(45662.250000i);    // Vec_kaLpi=4.348745
tabk(97)=844182.500000+(66382.960000i);    // Vec_kaLpi=4.555814
tabk(98)=926175.800000+(79545.740000i);    // Vec_kaLpi=4.772742
tabk(99)=1021084.000000+(84790.670000i);    // Vec_kaLpi=5.000000
           
for (int ii=0; ii<nbpt ; ii++) {
//klpi= klpimin+(pasklpi*ii);
klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));

cout << "klpi: " << klpi << endl;

freq= (c0*klpi)/(2*Lx);
omega=2*pi*freq;
complex q0=-1i*omega*phi0;



k=tabk(ii);
cout << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;

complex f0=-1i*k;
complex err1=1.+1i;
int iteration = 1;
while (abs(err1)> 0.02) {


//*****************************************************************  Solve the problem of density ******************************************************* 
//Define FE space for density
cout << "***** Solving the problem of density [1/8]" << endl;
fespace Uhr(Th,P2,periodic=[[1,y],[2,y]]);	// ?
fespace Phr(Th,P1,periodic=[[1,y],[2,y]]);	// ?
fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);	// ?
Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];

// Density problem

problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) =
int2d(Th)(1i*omega*br*lr-dx(vxr)*lr-dy(vyr)*lr-1i*k*vxr*lr)+
int2d(Th)(
        - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr
        - pr*(dx(uxr)+dy(uyr))
        + 1i*k*pr*uxr
        + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr)))
        - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr))
        + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr))
        + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr))
        + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr))
        )
      - int2d(Th)(f0*uxr)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr*sr
        + 1i*omega*beta0*T0*pr*sr
        + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr))
        + 2*1i*kappa*k*tr*dx(sr)

        )
   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr)
+on(1,2,3,4,vyr=0)
+on(5,vxr=0,vyr=0,tr=0);
nonlocalDensity;


mesh Thjr=Th;
//real errorr=0.005;
//real errorc=0.005;
real errorr=0.002;
real errorc=0.002;

// Creation of the finer mesh Thj          
Thjr=adaptmesh(Thjr,
 [real(vxr),real(vyr),imag(vxr),imag(vyr)],[real(tr),imag(tr)],[real(br),imag(br)]
 ,err=errorr,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the density system on the finer mesh Thj

fespace Uhjr(Thjr,P2,periodic=[[1,y],[2,y]]);
fespace Phjr(Thjr,P1,periodic=[[1,y],[2,y]]);
fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];

cout << "***** Solving the problem of density [2/8]" << endl;
problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
int2d(Thjr)(
        - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
        - pjr*(dx(uxjr)+dy(uyjr))
        + 1i*k*pjr*uxjr
        + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
        - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
        + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
        + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
        + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
        )
      - int2d(Thjr)(f0*uxjr)
   + int2d(Thjr)(
        - 1i*omega*rho0*cp*tjr*sjr
        + 1i*omega*beta0*T0*pjr*sjr
        + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
        + 2*1i*kappa*k*tjr*dx(sjr)
        )
   + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
+on(1,2,3,4,vyjr=0)
+on(5,vxjr=0,vyjr=0,tjr=0);
nonlocaljDensity;


real phir=int2d(Thjr)(1.)/(Vtot);
real Vfr=int2d(Thjr)(1.);
complex Vxr=1./Vfr*int2d(Thjr)(vxjr);
complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
complex rho=(f0-1i*k*Hr)/(-1i*omega*Vxr);

	


//*****************************************************************  Solve the problem of compressibility *******************************************************

//Difine FE space for compressibility
cout << "***** Solving the problem of compressibility [3/8]" << endl;
fespace Uhc(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

// Compressibility problem
problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
int2d(Th)(
        - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
        - pc*(dx(uxc)+dy(uyc))
        + 1i*k*pc*uxc
        + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
        - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
        + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
        + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
        + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc*sc
        + 1i*omega*beta0*T0*pc*sc
        + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
        + 2*1i*kappa*k*tc*dx(sc)
        )
   - int2d(Th)(beta0*T0*q0*sc) 
   + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
+on(1,2,3,4,vyc=0)
+on(5,vxc=0,vyc=0,tc=0);
nonlocalCompressibility;             
    
mesh Thjc=Th;
//real error=0.002;

// Creatioin of finer mesh 
Thjc=adaptmesh(Thjc,
 [real(vxc),real(vyc),imag(vxc),imag(vyc)],[real(tc),imag(tc)],[real(bc),imag(bc)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the compressibility system on the finer mesh Thj

fespace Uhjc(Thjc,P2,periodic=[[1,y],[2,y]]);
fespace Phjc(Thjc,P1,periodic=[[1,y],[2,y]]);
fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];

cout << "***** Solving the problem of compressibility [4/8]" << endl;
problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
int2d(Thjc)(
        - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
        - pjc*(dx(uxjc)+dy(uyjc))
        + 1i*k*pjc*uxjc
        + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
        - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
        + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
        + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
        + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
        )
   + int2d(Thjc)(
        - 1i*omega*rho0*cp*tjc*sjc
        + 1i*omega*beta0*T0*pjc*sjc
        + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
        + 2*1i*kappa*k*tjc*dx(sjc)
        )
	- int2d(Thjc)(beta0*T0*q0*sjc)
   + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
+on(1,2,3,4,vyjc=0)
+on(5,vxjc=0,vyjc=0,tjc=0);
nonlocaljCompressibility;

real phic=int2d(Thjc)(1.)/(Vtot);
real Vfc=int2d(Thjc)(1.);
complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
complex B=1./Vfc*int2d(Thjc)(bjc);
complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);
complex chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);



	
 



//               ***************************************************** Start  computing the derivatives  ************************************************

cout << "***** Start  computing the derivatives - density [5/8]" << endl;
complex dk= 0.001*k;
complex k1=k+dk;
complex f01=-1i*k1;

// Compute the density in k+dk, rho1
fespace Uhr1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phr1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
int2d(Th)(
        - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
        - pr1*(dx(uxr1)+dy(uyr1))
        + 1i*k1*pr1*uxr1
        + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
        - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
        + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
        + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
        + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
        )
      - int2d(Th)(f01*uxr1)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr1*sr1
        + 1i*omega*beta0*T0*pr1*sr1
        + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
        + 2*1i*kappa*k1*tr1*dx(sr1)

        )
   + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
+on(1,2,3,4,vyr1=0)
+on(5,vxr1=0,vyr1=0,tr1=0);
nonlocalDensity1;

mesh Thjr1=Th;
//real error=0.002;
Thjr1=adaptmesh(Thjr1,
 [real(vxr1),real(vyr1),imag(vxr1),imag(vyr1)],[real(tr1),imag(tr1)],[real(br1),imag(br1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjr1(Thjr1,P2,periodic=[[1,y],[2,y]]);
fespace Phjr1(Thjr1,P1,periodic=[[1,y],[2,y]]);
fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];

cout << "***** Start  computing the derivatives - density [6/8]" << endl;
problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
int2d(Thjr1)(
        - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
        - pjr1*(dx(uxjr1)+dy(uyjr1))
        + 1i*k1*pjr1*uxjr1
        + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
        - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
        + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
        + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
        + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
        )
      - int2d(Thjr1)(f01*uxjr1)
   + int2d(Thjr1)(
        - 1i*omega*rho0*cp*tjr1*sjr1
        + 1i*omega*beta0*T0*pjr1*sjr1
        + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
        + 2*1i*kappa*k1*tjr1*dx(sjr1)
        )
   + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
+on(1,2,3,4,vyjr1=0)
+on(5,vxjr1=0,vyjr1=0,tjr1=0);
nonlocalj1Density;


real phir1=int2d(Thjr1)(1.)/(Vtot);
real Vfr1=int2d(Thjr1)(1.);
complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

	

// Compute the compressibility in k+dk, chi1

fespace Uhc1(Th,P2,periodic=[[1,y],[2,y]]);
fespace Phc1(Th,P1,periodic=[[1,y],[2,y]]);
fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];

cout << "***** Start  computing the derivatives - compressibility [7/8]" << endl;
problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
int2d(Th)(
        - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
        - pc1*(dx(uxc1)+dy(uyc1))
        + 1i*k1*pc1*uxc1
        + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
        - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
        + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
        + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
        + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc1*sc1
        + 1i*omega*beta0*T0*pc1*sc1
        + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
        + 2*1i*kappa*k1*tc1*dx(sc1)
        )
   - int2d(Th)(beta0*T0*q0*sc1) 
   + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
+on(1,2,3,4,vyc1=0)
+on(5,vxc1=0,vyc1=0,tc1=0);
nonlocalCompressibility1;             
    
mesh Thjc1=Th;
// error=0.002;

Thjc1=adaptmesh(Thjc1,
 [real(vxc1),real(vyc1),imag(vxc1),imag(vyc1)],[real(tc1),imag(tc1)],[real(bc1),imag(bc1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Uhjc1(Thjc1,P2,periodic=[[1,y],[2,y]]);
fespace Phjc1(Thjc1,P1,periodic=[[1,y],[2,y]]);
fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];

cout << "***** Start  computing the derivatives - compressibility [8/8]" << endl;
problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) =
int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+
int2d(Thjc1)(
        - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1
        - pjc1*(dx(uxjc1)+dy(uyjc1))
        + 1i*k1*pjc1*uxjc1
        + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1)))
        - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1))
        + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1))
        + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1))
        + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1))
        )
   + int2d(Thjc1)(
        - 1i*omega*rho0*cp*tjc1*sjc1
        + 1i*omega*beta0*T0*pjc1*sjc1
        + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1))
        + 2*1i*kappa*k1*tjc1*dx(sjc1)
        )
	- int2d(Thjc1)(beta0*T0*q0*sjc1)
   + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1)
+on(1,2,3,4,vyjc1=0)
+on(5,vxjc1=0,vyjc1=0,tjc1=0);
nonlocalj1Compressibility;

real phic1=int2d(Thjc1)(1.)/(Vtot);
real Vfc1=int2d(Thjc1)(1.);
complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1);
complex B1=1./Vfc1*int2d(Thjc1)(bjc1);
complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1);
complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1);



// Expressions of rhop and chip

//complex rhop= (rho1-rho)/dk;
//complex chip= (chi1-chi)/dk;

//            ************************************************* End computing the derivatives ***********************************************


 complex F= rho*chi*omega^2-k^2;  //fmod
 complex F1= rho1*chi1*omega^2-k1^2; //fmod 
//complex F= omega^2-k^2./rho/chi;
//complex F1= omega^2-k1^2./rho1/chi1;
complex Fp=(F1-F)/dk; 

complex kout=k-F/Fp;

err1=(kout-k)/k;
k=kout;


// Affichage du nombre d'itération
cout << "Iteration numero: " << iteration << endl;
iteration=iteration+1;
// Affichage de la valeur de k
cout << "k=" << real(k) << " + " << imag(k) << "i" << endl;
// Affichage de l'erreur
cout << "Erreur : " << abs(err1) << endl;
// Sauvegarde valeur de k
//ofstream gg(fileout2,append);
//	   {
//	   int nold=gg.precision(10);
//   
//    	   gg.scientific << real(k) << " "<< imag(k) <<endl ;
//   	   }
// //complex C=omega/k;
  }

ofstream ff(fileout,append);
	   {
	   int nold=ff.precision(10);
   
    	   ff.scientific << klpi << " "<< real(k) << " "<< imag(k) <<" "<< real(omega/k) << " " << imag(omega/k) <<endl ;
   	   }
      
}

cpu=clock()-cpu;
cout << "cpu: " << cpu << endl;




