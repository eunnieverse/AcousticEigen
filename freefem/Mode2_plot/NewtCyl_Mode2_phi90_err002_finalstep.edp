//--------------------------------------------------------------------//
// Newton Iteration on an array of rigid cylinders in 2D 
// Compute the complex wavenumber k and phase velocity c
// 2nd Mode 
// Created by Navid Nemati
// Modified by Anshuman Kumar
// Modified by Yoonkyung Eunnie Lee 2015-06-24
//--------------------------------------------------------------------//
load "UMFPACK64";
load "medit";
real cpu=clock();
string filebase = "NewtCyl_Mode2_phi90_err002_finalstep";
string logfilename = filebase+".log";
{ ofstream f(logfilename,append);
  f << "Opened Log File..." << endl;
};
//--------------------------------------------------------------------//
//---Inputs
real L=1e-5;                    // pitch(m)
real phi00=0.9;                 // liquid volume fraction
real R=sqrt((1.-phi00)/pi)*L;   //(m)

real T0=293.; 			// Temperature [K]
real c0=331.+0.6*(T0-273.); 	// speed of sound at T0[m/s]
real rho00=1.2;	 		// air density [kg/m^3]	
real K0=rho00*c0^2;		// Bulk modulus = 1/chi0 [pressure unit N/m^2]
real nuh=2.15e-5;		// kappa/(rho0*Cp), [kappa:thermal conductivity, W/mK]
real nuv=1.5e-5;		// kinematic viscosity_v (not used) [m^2/s]
real Pr=0.697674418604651;	// Prandtle #
real Cp=1005.;			// Heat Capacity [Joule/kg K]
real Beta0=1./T0;		// Coeff. of thermal expansion [1/K]  
real gam=1.4;			// Cp/Cv 

//---air properties
real eta=nuv*rho00, rho0=rho00, cp=1005., kappa=nuh*rho00*Cp, gamma=1.4, chi0=1./K0; 
				//chi0: compressibility. 
real zeta=0.6*eta; 		// second(bulk) viscosity 
real phi0=1.; 			//Phi_0, pressure potential [N/m^2]
complex k; 			//complex wavenumber, [rad/m]

real beta0=sqrt(rho0*cp*chi0*(gamma-1)/T0); //=Beta0

complex rho = -1.0; 
complex chi = -1.0; 
//--------------------------------------------------------------------//
//---Coarse Mesh properties 
int n=20, nedg=40; 		// number of mesh points on boundary
				// n on bloch(unit cell)
 				// nedg on cylinder

real x1=0., y1=0.;		// origin
real xMin=-L/2., xMax=L/2., yMin=-L/2., yMax=L/2.;  
real Lx=xMax-xMin, Ly=yMax-yMin; 
real Vtot=Lx*Ly;
//------------------------------------------------------------
// build geometry
border a1(t=yMax,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=3;};
border a3(t=yMin,yMax){x=xMax;y=t;label=2;};// output
border a4(t=xMax,xMin){x=t;y=yMax;label=4;};
border c1(t=0,2*pi){ x=x1+R*cos(t); y=y1+R*sin(t);label=5;};
//------------------------------------------------------------
// CREATE INITIAL MESH
mesh Th= buildmesh( a1(n)+a2(n)+a3(n)+a4(n)+c1(-1*nedg));
//------------------------------------------------------------
int nbpt = 100;  // frequency number of points 
real klpi,pasklpi,klpimin=0.05,klpimax=5; 
// klpi: xaxis, kL/pi
// pasklpi: unit step in x
// pasklpi= (klpimax-klpimin)/(nbpt); 
pasklpi= (klpimax-klpimin)/(nbpt-1);//corrected:Eunnie

//real freq,pasfreq,fmin =3.4000000000e+01 ,fmax =8575 ;
//pasf = (fmax-fmin)/(nbpt);
real freq; 	//  [1/s]
real omega;	//  [rad/s]

complex[int] tabk(nbpt); //k tabulated (initial guess) 

//initial k for 100 points from klp=0.05 to 5
//tabk is the result in NewtCyl_Mode2_phi90_err*.txt
//Load tabk file ? ? not yet. 
tabk(0)=497333.058760+(841634.243240i);    // Vec_kaLpi=0.050000
tabk(1)=-126870.847970+(1321146.270900i);    // Vec_kaLpi=0.052381
tabk(2)=-348223.463050+(824079.979540i);    // Vec_kaLpi=0.054875
tabk(3)=518585.195850+(848139.366400i);    // Vec_kaLpi=0.057488
tabk(4)=504245.414140+(841179.373780i);    // Vec_kaLpi=0.060225
tabk(5)=500864.851830+(833923.008580i);    // Vec_kaLpi=0.063093
tabk(6)=500813.052890+(827902.655490i);    // Vec_kaLpi=0.066097
tabk(7)=506940.333040+(829483.592630i);    // Vec_kaLpi=0.069244
tabk(8)=507131.452270+(824198.842500i);    // Vec_kaLpi=0.072541
tabk(9)=511128.210770+(826847.289820i);    // Vec_kaLpi=0.075996
tabk(10)=514044.424000+(828540.370760i);    // Vec_kaLpi=0.079614
tabk(11)=515353.407850+(822680.717950i);    // Vec_kaLpi=0.083405
tabk(12)=518088.427000+(825077.418270i);    // Vec_kaLpi=0.087376
tabk(13)=520380.607410+(826833.049170i);    // Vec_kaLpi=0.091537
tabk(14)=522305.957250+(828103.405860i);    // Vec_kaLpi=0.095896
tabk(15)=525884.681410+(821971.732420i);    // Vec_kaLpi=0.100462
tabk(16)=527937.381210+(823817.446010i);    // Vec_kaLpi=0.105245
tabk(17)=529970.044580+(825014.166380i);    // Vec_kaLpi=0.110257
tabk(18)=532228.839750+(825715.746930i);    // Vec_kaLpi=0.115506
tabk(19)=534983.044650+(826081.081980i);    // Vec_kaLpi=0.121006
tabk(20)=538449.722870+(826163.490880i);    // Vec_kaLpi=0.126768
tabk(21)=542819.026270+(825841.423330i);    // Vec_kaLpi=0.132804
tabk(22)=548176.809340+(824777.181090i);    // Vec_kaLpi=0.139128
tabk(23)=543682.717870+(830136.405590i);    // Vec_kaLpi=0.145753
tabk(24)=549281.498950+(827308.494040i);    // Vec_kaLpi=0.152693
tabk(25)=544968.991860+(829147.744490i);    // Vec_kaLpi=0.159963
tabk(26)=549248.363620+(822446.044300i);    // Vec_kaLpi=0.167580
tabk(27)=543366.415270+(822088.605760i);    // Vec_kaLpi=0.175560
tabk(28)=1304680.771400+(2159992.386800i);    // Vec_kaLpi=0.183919
tabk(29)=540833.758630+(827258.993280i);    // Vec_kaLpi=0.192676
tabk(30)=71904.694091+(8095.995010i);    // Vec_kaLpi=0.201851
tabk(31)=1876695.842300+(2527960.938400i);    // Vec_kaLpi=0.211462
tabk(32)=-933364.856230+(1931586.120100i);    // Vec_kaLpi=0.221531
tabk(33)=556847.898060+(834811.557680i);    // Vec_kaLpi=0.232079
tabk(34)=558713.776760+(832563.758230i);    // Vec_kaLpi=0.243130
tabk(35)=560779.967940+(830109.038670i);    // Vec_kaLpi=0.254707
tabk(36)=563064.948960+(827413.758220i);    // Vec_kaLpi=0.266835
tabk(37)=565657.889320+(824445.510270i);    // Vec_kaLpi=0.279541
tabk(38)=568579.941770+(821202.643870i);    // Vec_kaLpi=0.292851
tabk(39)=571906.976980+(817682.639920i);    // Vec_kaLpi=0.306795
tabk(40)=562550.158520+(822879.498360i);    // Vec_kaLpi=0.321404
tabk(41)=564413.228230+(819160.698670i);    // Vec_kaLpi=0.336708
tabk(42)=564993.770550+(815264.791850i);    // Vec_kaLpi=0.352740
tabk(43)=563566.921440+(810933.042170i);    // Vec_kaLpi=0.369536
tabk(44)=559926.243220+(805602.078580i);    // Vec_kaLpi=0.387132
tabk(45)=564576.970700+(794076.743890i);    // Vec_kaLpi=0.405565
tabk(46)=563555.139730+(787088.165060i);    // Vec_kaLpi=0.424877
tabk(47)=570633.313730+(780182.254800i);    // Vec_kaLpi=0.445108
tabk(48)=580823.339520+(793273.099430i);    // Vec_kaLpi=0.466302
tabk(49)=170874.569370+(12316.090209i);    // Vec_kaLpi=0.488505
tabk(50)=179029.297520+(12707.520708i);    // Vec_kaLpi=0.511766
tabk(51)=187589.336400+(13161.082928i);    // Vec_kaLpi=0.536134
tabk(52)=196602.229360+(13676.921078i);    // Vec_kaLpi=0.561662
tabk(53)=206132.618950+(14279.046485i);    // Vec_kaLpi=0.588406
tabk(54)=216205.255380+(15001.628680i);    // Vec_kaLpi=0.616423
tabk(55)=226891.672030+(15903.472406i);    // Vec_kaLpi=0.645775
tabk(56)=238274.363540+(17089.253063i);    // Vec_kaLpi=0.676524
tabk(57)=250475.575080+(18770.070349i);    // Vec_kaLpi=0.708737
tabk(58)=263508.732470+(21371.037566i);    // Vec_kaLpi=0.742484
tabk(59)=277066.073200+(25825.016955i);    // Vec_kaLpi=0.777838
tabk(60)=289152.532890+(32903.126757i);    // Vec_kaLpi=0.814875
tabk(61)=297425.387700+(40265.135481i);    // Vec_kaLpi=0.853676
tabk(62)=302890.706890+(44971.634320i);    // Vec_kaLpi=0.894325
tabk(63)=307282.340880+(46030.994568i);    // Vec_kaLpi=0.936909
tabk(64)=317032.237440+(-43188.189976i);    // Vec_kaLpi=0.981520
tabk(65)=318862.284190+(33208.067638i);    // Vec_kaLpi=1.028256
tabk(66)=337395.963820+(18302.815559i);    // Vec_kaLpi=1.077217
tabk(67)=362979.602840+(14750.785177i);    // Vec_kaLpi=1.128510
tabk(68)=385596.965300+(14783.492641i);    // Vec_kaLpi=1.182245
tabk(69)=407427.714810+(15386.894520i);    // Vec_kaLpi=1.238538
tabk(0)=18957.727799+(5709.476040i);    // Vec_kaLpi=0.050000
tabk(1)=19790.474976+(5752.241342i);    // Vec_kaLpi=0.052381
tabk(2)=20663.531762+(5799.248349i);    // Vec_kaLpi=0.054875
tabk(3)=21580.412790+(5842.398874i);    // Vec_kaLpi=0.057488
tabk(4)=22540.549064+(5888.223640i);    // Vec_kaLpi=0.060225
tabk(5)=23547.162736+(5936.100437i);    // Vec_kaLpi=0.063093
tabk(6)=24602.308613+(5985.334799i);    // Vec_kaLpi=0.066097
tabk(7)=25706.500018+(6036.152213i);    // Vec_kaLpi=0.069244
tabk(8)=26863.451975+(6092.002666i);    // Vec_kaLpi=0.072541
tabk(9)=28078.679372+(6148.477092i);    // Vec_kaLpi=0.075996
tabk(10)=29349.214312+(6205.704745i);    // Vec_kaLpi=0.079614
tabk(11)=30679.569816+(6267.199512i);    // Vec_kaLpi=0.083405
tabk(12)=32073.583766+(6331.089666i);    // Vec_kaLpi=0.087376
tabk(13)=33532.926812+(6397.599888i);    // Vec_kaLpi=0.091537
tabk(14)=35061.063134+(6467.085169i);    // Vec_kaLpi=0.095896
tabk(15)=36660.555852+(6539.858945i);    // Vec_kaLpi=0.100462
tabk(16)=529836.897630+(824301.916780i);    // Vec_kaLpi=0.105245
tabk(17)=543655.398110+(848747.929420i);    // Vec_kaLpi=0.110257
tabk(18)=537986.763030+(833048.906720i);    // Vec_kaLpi=0.115506
tabk(19)=531710.233650+(825315.155310i);    // Vec_kaLpi=0.121006
tabk(20)=535011.014250+(823971.382260i);    // Vec_kaLpi=0.126768
tabk(21)=537449.389160+(825837.657120i);    // Vec_kaLpi=0.132804
tabk(22)=545102.973360+(821186.851620i);    // Vec_kaLpi=0.139128
tabk(23)=542858.147290+(824974.379640i);    // Vec_kaLpi=0.145753
tabk(24)=540448.239400+(825299.235340i);    // Vec_kaLpi=0.152693
tabk(25)=540087.180430+(823716.569190i);    // Vec_kaLpi=0.159963
tabk(26)=541332.990110+(821908.881340i);    // Vec_kaLpi=0.167580
tabk(27)=543686.468040+(820125.904640i);    // Vec_kaLpi=0.175560
tabk(28)=546958.552890+(818450.075280i);    // Vec_kaLpi=0.183919
tabk(29)=550815.283620+(816611.263850i);    // Vec_kaLpi=0.192676
tabk(30)=547952.367910+(821071.141700i);    // Vec_kaLpi=0.201851
tabk(31)=551737.856680+(818365.555310i);    // Vec_kaLpi=0.211462
tabk(32)=555351.447940+(813386.001060i);    // Vec_kaLpi=0.221531
tabk(33)=543535.985370+(819085.702910i);    // Vec_kaLpi=0.232079
tabk(34)=545729.702610+(817808.800560i);    // Vec_kaLpi=0.243130
tabk(35)=547890.342770+(816432.698320i);    // Vec_kaLpi=0.254707
tabk(36)=550018.186970+(814977.677120i);    // Vec_kaLpi=0.266835
tabk(37)=552107.403270+(813435.954230i);    // Vec_kaLpi=0.279541
tabk(38)=554151.373500+(811827.418680i);    // Vec_kaLpi=0.292851
tabk(39)=556140.809540+(810146.412570i);    // Vec_kaLpi=0.306795
tabk(40)=558057.800760+(808382.406830i);    // Vec_kaLpi=0.321404
tabk(41)=559899.744760+(806530.710010i);    // Vec_kaLpi=0.336708
tabk(42)=561651.830040+(804557.385390i);    // Vec_kaLpi=0.352740
tabk(43)=563339.458860+(802448.891400i);    // Vec_kaLpi=0.369536
tabk(44)=564969.393730+(800181.655730i);    // Vec_kaLpi=0.387132
tabk(45)=566552.166630+(797742.793200i);    // Vec_kaLpi=0.405565
tabk(46)=568116.038490+(795135.006440i);    // Vec_kaLpi=0.424877
tabk(47)=569657.675970+(792353.662620i);    // Vec_kaLpi=0.445108
tabk(48)=571200.357100+(789401.598850i);    // Vec_kaLpi=0.466302
tabk(49)=572739.014630+(786277.663840i);    // Vec_kaLpi=0.488505
tabk(50)=574277.625540+(782982.911100i);    // Vec_kaLpi=0.511766
tabk(51)=575809.522260+(779506.359320i);    // Vec_kaLpi=0.536134
tabk(52)=577331.650600+(775844.214030i);    // Vec_kaLpi=0.561662
tabk(53)=578855.113250+(771990.157850i);    // Vec_kaLpi=0.588406
tabk(54)=570429.250730+(778039.638680i);    // Vec_kaLpi=0.616423
tabk(55)=572070.272480+(774024.861470i);    // Vec_kaLpi=0.645775
tabk(56)=573665.632920+(769766.188040i);    // Vec_kaLpi=0.676524
tabk(57)=575194.332580+(765238.377640i);    // Vec_kaLpi=0.708737
tabk(58)=576641.413810+(760410.026890i);    // Vec_kaLpi=0.742484
tabk(59)=577981.973620+(755248.528310i);    // Vec_kaLpi=0.777838
tabk(60)=579177.348460+(749708.332340i);    // Vec_kaLpi=0.814875
tabk(61)=580199.605260+(743733.582300i);    // Vec_kaLpi=0.853676
tabk(62)=580999.088580+(737249.194220i);    // Vec_kaLpi=0.894325
tabk(63)=581513.394370+(730152.717720i);    // Vec_kaLpi=0.936909
tabk(64)=581694.122400+(722310.941800i);    // Vec_kaLpi=0.981520
tabk(65)=581486.594590+(713541.504380i);    // Vec_kaLpi=1.028256
tabk(66)=580860.498410+(703615.089070i);    // Vec_kaLpi=1.077217
tabk(67)=579831.957870+(692244.374150i);    // Vec_kaLpi=1.128510
tabk(68)=578463.209420+(679108.586510i);    // Vec_kaLpi=1.182245
tabk(69)=576906.697000+(663857.492060i);    // Vec_kaLpi=1.238538
tabk(70)=607252.627790+(618471.085080i);    // Vec_kaLpi=1.297512
tabk(71)=609704.610700+(598319.481750i);    // Vec_kaLpi=1.359294
tabk(72)=651281.442890+(558242.679260i);    // Vec_kaLpi=1.424018
tabk(73)=617036.932290+(555621.572990i);    // Vec_kaLpi=1.491824
tabk(74)=622952.189760+(555189.379890i);    // Vec_kaLpi=1.562858
tabk(75)=625029.966940+(501589.985630i);    // Vec_kaLpi=1.637275
tabk(76)=629836.898120+(467141.410730i);    // Vec_kaLpi=1.715235
tabk(77)=644165.216170+(429722.070390i);    // Vec_kaLpi=1.796907
tabk(78)=658939.737780+(379646.841660i);    // Vec_kaLpi=1.882468
tabk(79)=765506.618550+(254366.965550i);    // Vec_kaLpi=1.972103
tabk(80)=702601.230730+(108027.715440i);    // Vec_kaLpi=2.066006
tabk(81)=688912.787900+(79004.563332i);    // Vec_kaLpi=2.164381
tabk(82)=741926.219010+(57641.887320i);    // Vec_kaLpi=2.267439
tabk(83)=795567.259460+(89056.417351i);    // Vec_kaLpi=2.375405
tabk(84)=1131880.906700+(206259.437990i);    // Vec_kaLpi=2.488512
tabk(85)=839792.010390+(-200851.696420i);    // Vec_kaLpi=2.607004
tabk(86)=816314.621990+(50008.062729i);    // Vec_kaLpi=2.731139
tabk(87)=891348.932680+(36809.450330i);    // Vec_kaLpi=2.861184
tabk(88)=939413.102970+(49793.822394i);    // Vec_kaLpi=2.997421
tabk(89)=989527.523540+(38132.360507i);    // Vec_kaLpi=3.140146
tabk(90)=1054798.633000+(48321.798193i);    // Vec_kaLpi=3.289666
tabk(91)=1042074.227300+(-119827.255520i);    // Vec_kaLpi=3.446306
tabk(92)=1154558.954200+(67963.542843i);    // Vec_kaLpi=3.610405
tabk(93)=1197466.002800+(80412.672823i);    // Vec_kaLpi=3.782317
tabk(94)=1247627.288300+(76100.226768i);    // Vec_kaLpi=3.962414
tabk(95)=1797619.700400+(-673637.393860i);    // Vec_kaLpi=4.151088
tabk(96)=1613077.538200+(467393.467560i);    // Vec_kaLpi=4.348745
tabk(97)=749921.480310+(2699879.587000i);    // Vec_kaLpi=4.555814
tabk(98)=1515219.326300+(32258.474642i);    // Vec_kaLpi=4.772742
tabk(99)=1920691.231400+(229562.220600i);    // Vec_kaLpi=5.000000
           
//for (int ii=79;ii<80;ii++) {
for (int ii=0; ii<nbpt ; ii++) {
//klpi= klpimin+(pasklpi*ii); //linear spacing for x
klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));//log spaced x

 { ofstream f(logfilename,append);
   cout << "klpi: " << klpi << endl;
   f    << "klpi: " << klpi << endl;
 };
 
freq= (c0*klpi)/(2*Lx); 
omega=2*pi*freq;
complex q0=-1i*omega*phi0;

k=tabk(ii); //initial guess (k will be updated in the code)
 { ofstream f(logfilename,append);
   cout << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;
   f    << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;
 };
 
complex f0=-1i*k;  // forcing amplitude (-i k Phi0)
complex err1=1.+1i; // dummy error value
// int iteration = 1; not used for final run
// while (abs(err1)> 0.02) { //not used for final run 

//************************************************************//
//************************************************************//
// Solve the problem of density 
//************************************************************//
//************************************************************//
//Define FE space for density
 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of density [1/8]" << endl;
   f    << "***** Solving the problem of density [1/8]" << endl;
 };
// Th: area mesh (fluid area) 
fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];// variables & test functions 
//------------------------------------------------------------
// Density problem
// dx(f): df/dx 
// int2d(Th)(f): 2d integral 
// on(1,2,3,4,vyr=0): BC
//------------------------------------------------------------
// CONTINUITY EQN IN WEAK FORM (EQ. III) 
problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) =
int2d(Th)(1i*omega*br*lr-dx(vxr)*lr-dy(vyr)*lr-1i*k*vxr*lr)+
int2d(Th)(
        - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr
        - pr*(dx(uxr)+dy(uyr))
        + 1i*k*pr*uxr
        + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr)))
        - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr))
        + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr))
        + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr))
        + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr))
        + eta*(k^2)*(vxr*uxr+vyr*uyr)
        + (zeta+1./3.*eta)*(k^2)*vxr*uxr
        )
      - int2d(Th)(f0*uxr)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr*sr
        + 1i*omega*beta0*T0*pr*sr
        + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr))
        + 2*1i*kappa*k*tr*dx(sr)
        + (k^2)*kappa*tr*sr
        )
   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr)
+on(1,2,3,4,vyr=0)
+on(5,vxr=0,vyr=0,tr=0);
//------------------------------------------------------------
nonlocalDensity;	//solve: get vx,vy,pr,tr,vr at every meshpoint, corresponding to omega, k 

mesh Thjr=Th; // Creation of the finer mesh Thj          
// real errorr=0.005;
// real errorc=0.005;
  real errorr=0.002;
  real errorc=0.002;
 // // rather than doing adaptmesh, load a fine mesh. 
 //mesh Thjr=readmesh("Thjr_NewtCyl_Mode2_phi90_err002.msh");
Thjr=adaptmesh(Thjr,
 [real(vxr),real(vyr),imag(vxr),imag(vyr)],[real(tr),imag(tr)],[real(br),imag(br)]
 ,err=errorr,nbvx=1000000,periodic=[[1,y],[2,y]]);
// Solve the density system on the finer mesh Thj
fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];

{ ofstream f(logfilename,append);
  cout << "***** Solving the problem of density [2/8]" << endl;
  f    << "***** Solving the problem of density [2/8]" << endl;
};
problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
int2d(Thjr)(
        - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
        - pjr*(dx(uxjr)+dy(uyjr))
        + 1i*k*pjr*uxjr
        + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
        - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
        + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
        + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
        + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
        + eta*(k^2)*(vxjr*uxjr+vyjr*uyjr)
        + (zeta+1./3.*eta)*(k^2)*vxjr*uxjr
        )
      - int2d(Thjr)(f0*uxjr)
   + int2d(Thjr)(
        - 1i*omega*rho0*cp*tjr*sjr
        + 1i*omega*beta0*T0*pjr*sjr
        + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
        + 2*1i*kappa*k*tjr*dx(sjr)
        + (k^2)*kappa*tjr*sjr
        )
   + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
+on(1,2,3,4,vyjr=0) // ? I don't want vyjr=0 to be here. I don't want Freefem to assume Neumann BC either. 
+on(5,vxjr=0,vyjr=0,tjr=0);

nonlocaljDensity;

real phir=int2d(Thjr)(1.)/(Vtot); //porosity from discretized area 
real Vfr=int2d(Thjr)(1.);
complex Vxr=1./Vfr*int2d(Thjr)(vxjr); // averaged velocity, V   
complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
rho=(f0-1i*k*Hr)/(-1i*omega*Vxr); //fluid rho. 

//************************************************************//
//************************************************************//
// Solve the problem of compressibility
//************************************************************//
//************************************************************//
//Difine FE space for compressibility
 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of compressibility [3/8]" << endl;
   f    << "***** Solving the problem of compressibility [3/8]" << endl;
 };
fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

// Compressibility problem
problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
int2d(Th)(
        - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
        - pc*(dx(uxc)+dy(uyc))
        + 1i*k*pc*uxc
        + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
        - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
        + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
        + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
        + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc*sc
        + 1i*omega*beta0*T0*pc*sc
        + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
        + 2*1i*kappa*k*tc*dx(sc)
        )
   - int2d(Th)(beta0*T0*q0*sc) 
   + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
+on(1,2,3,4,vyc=0)
+on(5,vxc=0,vyc=0,tc=0);
nonlocalCompressibility;             
    
mesh Thjc=Th;

// Creatioin of finer mesh 
Thjc=adaptmesh(Thjc,
 [real(vxc),real(vyc),imag(vxc),imag(vyc)],[real(tc),imag(tc)],[real(bc),imag(bc)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

// Solve the compressibility system on the finer mesh Thj
fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];

 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of compressibility [4/8]" << endl;
   f    << "***** Solving the problem of compressibility [4/8]" << endl;
 };
problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
int2d(Thjc)(
        - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
        - pjc*(dx(uxjc)+dy(uyjc))
        + 1i*k*pjc*uxjc
        + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
        - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
        + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
        + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
        + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
        + eta*(k^2)*(vxjc*uxjc+vyjc*uyjc)
        + (zeta+1./3.*eta)*(k^2)*vxjc*uxjc
        )
   + int2d(Thjc)(
        - 1i*omega*rho0*cp*tjc*sjc
        + 1i*omega*beta0*T0*pjc*sjc
        + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
        + 2*1i*kappa*k*tjc*dx(sjc)
        + (k^2)*kappa*tjc*sjc
        )
	- int2d(Thjc)(beta0*T0*q0*sjc)
   + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
+on(1,2,3,4,vyjc=0)
+on(5,vxjc=0,vyjc=0,tjc=0);
nonlocaljCompressibility;

real phic=int2d(Thjc)(1.)/(Vtot);
real Vfc=int2d(Thjc)(1.);
complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
complex B=1./Vfc*int2d(Thjc)(bjc);
complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);

chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);

//************************************************************//
//************************************************************//
// Start  computing the derivatives
//************************************************************//
//************************************************************//
 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives - density [5/8]" << endl;
   f    << "***** Start  computing the derivatives - density [5/8]" << endl;
 };
complex dk= 0.001*k;
complex k1=k+dk;
complex f01=-1i*k1;

// Compute the density in k+dk, rho1
fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
int2d(Th)(
        - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
        - pr1*(dx(uxr1)+dy(uyr1))
        + 1i*k1*pr1*uxr1
        + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
        - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
        + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
        + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
        + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
        + eta*(k^2)*(vxr1*uxr1+vyr1*uyr1)
        + (zeta+1./3.*eta)*(k^2)*vxr1*uxr1
        )
      - int2d(Th)(f01*uxr1)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr1*sr1
        + 1i*omega*beta0*T0*pr1*sr1
        + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
        + 2*1i*kappa*k1*tr1*dx(sr1)
        + (k^2)*kappa*tr1*sr1
        )
   + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
+on(1,2,3,4,vyr1=0)
+on(5,vxr1=0,vyr1=0,tr1=0);
nonlocalDensity1;

mesh Thjr1=Th;
//real error=0.002;
Thjr1=adaptmesh(Thjr1,
 [real(vxr1),real(vyr1),imag(vxr1),imag(vyr1)],[real(tr1),imag(tr1)],[real(br1),imag(br1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);

fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];

 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives - density [6/8]" << endl;
   f    << "***** Start  computing the derivatives - density [6/8]" << endl;
 };
problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
int2d(Thjr1)(
        - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
        - pjr1*(dx(uxjr1)+dy(uyjr1))
        + 1i*k1*pjr1*uxjr1
        + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
        - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
        + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
        + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
        + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
        + eta*(k^2)*(vxjr1*uxjr1+vyjr1*uyjr1)
        + (zeta+1./3.*eta)*(k^2)*vxjr1*uxjr1
        )
      - int2d(Thjr1)(f01*uxjr1)
   + int2d(Thjr1)(
        - 1i*omega*rho0*cp*tjr1*sjr1
        + 1i*omega*beta0*T0*pjr1*sjr1
        + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
        + 2*1i*kappa*k1*tjr1*dx(sjr1)
        + (k^2)*kappa*tjr1*sjr1
        )
   + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
+on(1,2,3,4,vyjr1=0)
+on(5,vxjr1=0,vyjr1=0,tjr1=0);
nonlocalj1Density;


real phir1=int2d(Thjr1)(1.)/(Vtot);
real Vfr1=int2d(Thjr1)(1.);
complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

	

// Compute the compressibility in k+dk, chi1
fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];

 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives -  compressibility [7/8]" << endl;
   f    << "***** Start  computing the derivatives -  compressibility [7/8]" << endl; 
 };

problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
int2d(Th)(
        - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
        - pc1*(dx(uxc1)+dy(uyc1))
        + 1i*k1*pc1*uxc1
        + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
        - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
        + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
        + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
        + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc1*sc1
        + 1i*omega*beta0*T0*pc1*sc1
        + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
        + 2*1i*kappa*k1*tc1*dx(sc1)
        )
   - int2d(Th)(beta0*T0*q0*sc1) 
   + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
+on(1,2,3,4,vyc1=0)
+on(5,vxc1=0,vyc1=0,tc1=0);
nonlocalCompressibility1;             
    
mesh Thjc1=Th;
// error=0.002;

Thjc1=adaptmesh(Thjc1,
 [real(vxc1),real(vyc1),imag(vxc1),imag(vyc1)],[real(tc1),imag(tc1)],[real(bc1),imag(bc1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);
fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];


 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives -  compressibility [8/8]" << endl;
   f    << "***** Start  computing the derivatives -  compressibility [8/8]" << endl; 
 };
problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) =
int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+
int2d(Thjc1)(
        - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1
        - pjc1*(dx(uxjc1)+dy(uyjc1))
        + 1i*k1*pjc1*uxjc1
        + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1)))
        - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1))
        + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1))
        + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1))
        + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1))
        + eta*(k^2)*(vxjc1*uxjc1+vyjc1*uyjc1)
        + (zeta+1./3.*eta)*(k^2)*vxjc1*uxjc1
        )
   + int2d(Thjc1)(
        - 1i*omega*rho0*cp*tjc1*sjc1
        + 1i*omega*beta0*T0*pjc1*sjc1
        + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1))
        + 2*1i*kappa*k1*tjc1*dx(sjc1)
        + (k^2)*kappa*tjc1*sjc1
        )
	- int2d(Thjc1)(beta0*T0*q0*sjc1)
   + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1)
+on(1,2,3,4,vyjc1=0)
+on(5,vxjc1=0,vyjc1=0,tjc1=0);
nonlocalj1Compressibility;

real phic1=int2d(Thjc1)(1.)/(Vtot);
real Vfc1=int2d(Thjc1)(1.);
complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1);
complex B1=1./Vfc1*int2d(Thjc1)(bjc1);
complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1);
complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1);



//************************************************************//
//************************************************************//
// End  computing the derivatives, Print Results 
//************************************************************//
//************************************************************//
complex Fw2 = omega^2-k^2./rho/chi;
complex F1w2= omega^2-k1^2./rho1/chi1;
complex Frhochiw2 = rho*chi*omega^2-k^2;
complex F1rhochiw2= rho1*chi1*omega^2-k1^2; 

complex F = Frhochiw2;
complex F1= F1rhochiw2; 
complex Fp=(F1-F)/dk; 
complex kout=k-F/Fp; //Newton Raphson 
err1=(kout-k)/k;
k=kout;

//--------------------------------------------------------------------//
// Print iteration number // Print the value of k // Print Error in Newton-Raphson
 { ofstream f(logfilename,append);
   cout << "*****************************************************************"<< endl; 
   cout << "Iteration number: " << "final run" << endl;
   cout << "k=" << k << endl;
   cout << "Erreur : " << abs(err1) << endl;
   cout << "*****************************************************************"<< endl; 

   f << "*****************************************************************"<< endl; 
   f << "Iteration number: " << "final run" << endl; 
   f << "k=" << k << endl; 
   f << "Erreur : " << abs(err1) << endl; 
   f << "*****************************************************************"<< endl; 
 };

// iteration=iteration+1; //not used for final run
//  } //end while //not used for final run 

 string foutname=filebase+"_F.txt";
 string kcoutname=filebase+"_kc.txt";
 string rhochioutname=filebase+"_rhochi.txt";

 { ofstream fout(foutname,append);
   fout << "F_w2= omega^2-k^2./rho/chi;" << endl; 
   fout << "F_rhochiw2 = rho*chi*omega^2-k^2" << endl; 
   fout << "klpi   re(F_w2)    im(F_w2)    re(F_rhochiw2)    im(F_rhochiw2)" << endl;
   fout << klpi << real(Fw2) << "   " << imag(Fw2) << "   " << real(Frhochiw2) << "   " << imag(Frhochiw2) << endl; 
 };

 { ofstream kc(kcoutname,append);
   kc << "klpi   re(k)   im(k)   re(c)   im(c)" << endl; 
   kc << klpi << "   "<< real(k) << "   "<< imag(k) <<"   ";
   kc << real(omega/k) << "   " << imag(omega/k) << endl;
 };
 { ofstream rhochi(rhochioutname,append);
   rhochi << "klpi   re(rho)   im(rho)   re(chi)   im(chi)" << endl; 
   rhochi << klpi  << "   " << real(rho) << "   " << imag(rho) << "   " << real(chi) << "   " << imag(chi) << "   " << endl ;
 };

}//end for 

//--- Record Time 
cpu=clock()-cpu;
{ ofstream f(logfilename,append);
  cout << "cpu: " << cpu << endl;
  f    << "cpu: " << cpu << endl;
};
