//--------------------------------------------------------------------//
// Newton Iteration on an array of rigid cylinders in 2D 
// Compute the complex wavenumber k and phase velocity c
// 2nd Mode 
// Created by Navid Nemati
// Modified by Anshuman Kumar
// Modified by Yoonkyung Eunnie Lee 2015-06-24
//--------------------------------------------------------------------//
load "UMFPACK64";
load "medit";
real cpu=clock();
bool pl=true;
bool plmesh=true;
bool svmesh=true; 
string filebase = "NewtCyl_Mode2_phi90_err005_plot";
string logfilename = filebase+".log";
{ ofstream f(logfilename,append);
  f << "Opened Log File..." << endl;
};
string savemeshname="";
string plotmeshname="";
string saveplotname = ""; 
//--------------------------------------------------------------------//
//---Inputs
real L=1e-5;                    // pitch(m)
real phi00=0.9;                 // liquid volume fraction
real R=sqrt((1.-phi00)/pi)*L;   //(m)

real T0=293.; 			// Temperature [K]
real c0=331.+0.6*(T0-273.); 	// speed of sound at T0[m/s]
real rho00=1.2;	 		// air density [kg/m^3]	
real K0=rho00*c0^2;		// Bulk modulus = 1/chi0 [pressure unit N/m^2]
real nuh=2.15e-5;		// kappa/(rho0*Cp), [kappa:thermal conductivity, W/mK]
real nuv=1.5e-5;		// kinematic viscosity_v (not used) [m^2/s]
real Pr=0.697674418604651;	// Prandtle #
real Cp=1005.;			// Heat Capacity [Joule/kg K]
real Beta0=1./T0;		// Coeff. of thermal expansion [1/K]  
real gam=1.4;			// Cp/Cv 

//---air properties
real eta=nuv*rho00, rho0=rho00, cp=1005., kappa=nuh*rho00*Cp, gamma=1.4, chi0=1./K0; 
				//chi0: compressibility. 
real zeta=0.6*eta; 		// second(bulk) viscosity 
real phi0=1.; 			//Phi_0, pressure potential [N/m^2]
complex k; 			//complex wavenumber, [rad/m]

real beta0=sqrt(rho0*cp*chi0*(gamma-1)/T0); //=Beta0

complex rho = -1.0; 
complex chi = -1.0; 
//--------------------------------------------------------------------//
//---Coarse Mesh properties 
int n=20, nedg=40; 		// number of mesh points on boundary
				// n on bloch(unit cell)
 				// nedg on cylinder

real x1=0., y1=0.;		// origin
real xMin=-L/2., xMax=L/2., yMin=-L/2., yMax=L/2.;  
real Lx=xMax-xMin, Ly=yMax-yMin; 
real Vtot=Lx*Ly;
//------------------------------------------------------------
// build geometry
border a1(t=yMax,yMin){x=xMin;y=t;label=1;};// input
border a2(t=xMin,xMax){x=t;y=yMin;label=3;};
border a3(t=yMin,yMax){x=xMax;y=t;label=2;};// output
border a4(t=xMax,xMin){x=t;y=yMax;label=4;};
border c1(t=0,2*pi){ x=x1+R*cos(t); y=y1+R*sin(t);label=5;};
//------------------------------------------------------------
// CREATE INITIAL MESH
mesh Th= buildmesh( a1(n)+a2(n)+a3(n)+a4(n)+c1(-1*nedg));
if(svmesh==true){
  savemeshname = "Th_" +filebase+ ".msh";
  savemesh(Th,savemeshname);
 };
if(plmesh==true){
  plotmeshname = "Th_"+filebase+".eps";
  plot(Th, wait=false, ps=plotmeshname);
 }
//------------------------------------------------------------
int nbpt = 100;  // frequency number of points 
real klpi,pasklpi,klpimin=0.05,klpimax=5; 
// klpi: xaxis, kL/pi
// pasklpi: unit step in x
// pasklpi= (klpimax-klpimin)/(nbpt); 
pasklpi= (klpimax-klpimin)/(nbpt-1);//corrected:Eunnie

//real freq,pasfreq,fmin =3.4000000000e+01 ,fmax =8575 ;
//pasf = (fmax-fmin)/(nbpt);
real freq; 	//  [1/s]
real omega;	//  [rad/s]

complex[int] tabk(nbpt); //k tabulated (initial guess) 

//initial k for 100 points from klp=0.05 to 5
//tabk is the result in NewtCyl_Mode2_phi90_err*.txt
//Load tabk file ? ? not yet. 
tabk(0)=491171.319040+(848929.089080i);    // Vec_kaLpi=0.050000
tabk(1)=-124769.707440+(1320784.887400i);    // Vec_kaLpi=0.052381
tabk(2)=-380716.596480+(851751.609630i);    // Vec_kaLpi=0.054875
tabk(3)=518469.058220+(847725.897370i);    // Vec_kaLpi=0.057488
tabk(4)=504399.004610+(841033.607510i);    // Vec_kaLpi=0.060225
tabk(5)=500882.172130+(833939.457140i);    // Vec_kaLpi=0.063093
tabk(6)=500821.729780+(827930.815400i);    // Vec_kaLpi=0.066097
tabk(7)=506946.526580+(829466.957680i);    // Vec_kaLpi=0.069244
tabk(8)=507128.946840+(824205.775890i);    // Vec_kaLpi=0.072541
tabk(9)=511106.602460+(826860.681140i);    // Vec_kaLpi=0.075996
tabk(10)=514044.135250+(828540.914350i);    // Vec_kaLpi=0.079614
tabk(11)=515344.679120+(822700.294650i);    // Vec_kaLpi=0.083405
tabk(12)=518099.167390+(825064.096920i);    // Vec_kaLpi=0.087376
tabk(13)=520389.573320+(826824.784730i);    // Vec_kaLpi=0.091537
tabk(14)=522321.882580+(828096.049040i);    // Vec_kaLpi=0.095896
tabk(15)=525899.608420+(821968.653170i);    // Vec_kaLpi=0.100462
tabk(16)=527950.713360+(823816.773880i);    // Vec_kaLpi=0.105245
tabk(17)=529966.992030+(825001.325150i);    // Vec_kaLpi=0.110257
tabk(18)=532228.607200+(825720.725240i);    // Vec_kaLpi=0.115506
tabk(19)=534973.554670+(826077.936700i);    // Vec_kaLpi=0.121006
tabk(20)=538431.230810+(826174.390920i);    // Vec_kaLpi=0.126768
tabk(21)=542822.742130+(825849.429190i);    // Vec_kaLpi=0.132804
tabk(22)=548175.882610+(824780.488110i);    // Vec_kaLpi=0.139128
tabk(23)=543689.562780+(830136.443150i);    // Vec_kaLpi=0.145753
tabk(24)=549303.852360+(827307.546710i);    // Vec_kaLpi=0.152693
tabk(25)=544970.594420+(829150.834350i);    // Vec_kaLpi=0.159963
tabk(26)=549268.330150+(822438.731910i);    // Vec_kaLpi=0.167580
tabk(27)=543367.737180+(822083.939620i);    // Vec_kaLpi=0.175560
tabk(28)=59903572.973000+(-196773695.360000i);    // Vec_kaLpi=0.183919
tabk(29)=540734.352840+(826861.973320i);    // Vec_kaLpi=0.192676
tabk(30)=-152828.088130+(2247191.893600i);    // Vec_kaLpi=0.201851
tabk(31)=1901071.292000+(2483410.170600i);    // Vec_kaLpi=0.211462
tabk(32)=14652948.754000+(216899461.840000i);    // Vec_kaLpi=0.221531
tabk(33)=556850.873870+(834811.990940i);    // Vec_kaLpi=0.232079
tabk(34)=558678.995410+(832568.419000i);    // Vec_kaLpi=0.243130
tabk(35)=560771.420300+(830112.656070i);    // Vec_kaLpi=0.254707
tabk(36)=563047.420320+(827416.028670i);    // Vec_kaLpi=0.266835
tabk(37)=565639.006230+(824470.587730i);    // Vec_kaLpi=0.279541
tabk(38)=568538.798370+(821200.678950i);    // Vec_kaLpi=0.292851
tabk(39)=571889.682430+(817692.749360i);    // Vec_kaLpi=0.306795
tabk(40)=562558.101810+(822867.394090i);    // Vec_kaLpi=0.321404
tabk(41)=564442.533880+(819163.792790i);    // Vec_kaLpi=0.336708
tabk(42)=565002.609080+(815280.005650i);    // Vec_kaLpi=0.352740
tabk(43)=563547.768490+(810941.041540i);    // Vec_kaLpi=0.369536
tabk(44)=559963.713840+(805561.615940i);    // Vec_kaLpi=0.387132
tabk(45)=564539.439500+(794072.244500i);    // Vec_kaLpi=0.405565
tabk(46)=563572.724420+(787067.557990i);    // Vec_kaLpi=0.424877
tabk(47)=570631.407230+(780196.750230i);    // Vec_kaLpi=0.445108
tabk(48)=580416.301060+(793024.181210i);    // Vec_kaLpi=0.466302
tabk(49)=170889.711040+(12302.911018i);    // Vec_kaLpi=0.488505
tabk(50)=179029.191100+(12707.543593i);    // Vec_kaLpi=0.511766
tabk(51)=187589.047050+(13161.032024i);    // Vec_kaLpi=0.536134
tabk(52)=196604.418760+(13673.303028i);    // Vec_kaLpi=0.561662
tabk(53)=206132.005900+(14278.810764i);    // Vec_kaLpi=0.588406
tabk(54)=216204.917540+(15001.410458i);    // Vec_kaLpi=0.616423
tabk(55)=226890.850380+(15903.085415i);    // Vec_kaLpi=0.645775
tabk(56)=238273.601340+(17088.862472i);    // Vec_kaLpi=0.676524
tabk(57)=250476.426870+(18774.612263i);    // Vec_kaLpi=0.708737
tabk(58)=263508.532840+(21373.504748i);    // Vec_kaLpi=0.742484
tabk(59)=277064.868020+(25825.586157i);    // Vec_kaLpi=0.777838
tabk(60)=289151.789820+(32901.761199i);    // Vec_kaLpi=0.814875
tabk(61)=297425.112510+(40264.291306i);    // Vec_kaLpi=0.853676
tabk(62)=302889.431540+(44970.846891i);    // Vec_kaLpi=0.894325
tabk(63)=307291.577210+(46037.772978i);    // Vec_kaLpi=0.936909
tabk(64)=317204.906130+(-43486.551114i);    // Vec_kaLpi=0.981520
tabk(65)=318863.320850+(33208.332932i);    // Vec_kaLpi=1.028256
tabk(66)=337395.633840+(18302.742259i);    // Vec_kaLpi=1.077217
tabk(67)=362979.004000+(14750.599845i);    // Vec_kaLpi=1.128510
tabk(68)=385596.318780+(14783.057412i);    // Vec_kaLpi=1.182245
tabk(69)=407420.881820+(15380.850750i);    // Vec_kaLpi=1.238538
tabk(0)=18957.729101+(5709.480018i);    // Vec_kaLpi=0.050000
tabk(1)=19790.476669+(5752.247040i);    // Vec_kaLpi=0.052381
tabk(2)=20663.526475+(5799.163061i);    // Vec_kaLpi=0.054875
tabk(3)=21580.406824+(5842.465113i);    // Vec_kaLpi=0.057488
tabk(4)=22540.776897+(5888.316603i);    // Vec_kaLpi=0.060225
tabk(5)=23547.231431+(5936.123224i);    // Vec_kaLpi=0.063093
tabk(6)=24602.313224+(5985.410357i);    // Vec_kaLpi=0.066097
tabk(7)=25706.500057+(6036.116629i);    // Vec_kaLpi=0.069244
tabk(8)=26863.656777+(6091.703790i);    // Vec_kaLpi=0.072541
tabk(9)=28078.787823+(6148.628405i);    // Vec_kaLpi=0.075996
tabk(10)=29349.295838+(6205.690817i);    // Vec_kaLpi=0.079614
tabk(11)=30679.596134+(6267.156992i);    // Vec_kaLpi=0.083405
tabk(12)=32073.590772+(6331.096760i);    // Vec_kaLpi=0.087376
tabk(13)=33532.910441+(6397.599595i);    // Vec_kaLpi=0.091537
tabk(14)=35061.139202+(6467.133981i);    // Vec_kaLpi=0.095896
tabk(15)=36660.550779+(6539.853850i);    // Vec_kaLpi=0.100462
tabk(16)=529917.943050+(824278.551970i);    // Vec_kaLpi=0.105245
tabk(17)=543850.991270+(848604.524980i);    // Vec_kaLpi=0.110257
tabk(18)=537785.849480+(833003.556340i);    // Vec_kaLpi=0.115506
tabk(19)=531709.595810+(825319.907300i);    // Vec_kaLpi=0.121006
tabk(20)=535008.156030+(823978.493800i);    // Vec_kaLpi=0.126768
tabk(21)=537434.845150+(825838.432510i);    // Vec_kaLpi=0.132804
tabk(22)=545102.303130+(821167.906540i);    // Vec_kaLpi=0.139128
tabk(23)=542880.187940+(824975.334980i);    // Vec_kaLpi=0.145753
tabk(24)=540441.380760+(825286.677950i);    // Vec_kaLpi=0.152693
tabk(25)=540081.543590+(823719.329290i);    // Vec_kaLpi=0.159963
tabk(26)=541334.059700+(821909.685160i);    // Vec_kaLpi=0.167580
tabk(27)=543692.312430+(820136.696160i);    // Vec_kaLpi=0.175560
tabk(28)=546961.986970+(818455.506050i);    // Vec_kaLpi=0.183919
tabk(29)=550837.431420+(816605.471470i);    // Vec_kaLpi=0.192676
tabk(30)=547949.388540+(821069.568320i);    // Vec_kaLpi=0.201851
tabk(31)=551721.852660+(818373.367360i);    // Vec_kaLpi=0.211462
tabk(32)=555364.783240+(813386.036940i);    // Vec_kaLpi=0.221531
tabk(33)=543539.317990+(819088.781540i);    // Vec_kaLpi=0.232079
tabk(34)=545731.481710+(817819.343840i);    // Vec_kaLpi=0.243130
tabk(35)=547890.519380+(816429.515760i);    // Vec_kaLpi=0.254707
tabk(36)=550008.067730+(814964.099470i);    // Vec_kaLpi=0.266835
tabk(37)=552105.492220+(813433.677580i);    // Vec_kaLpi=0.279541
tabk(38)=554146.406670+(811819.923400i);    // Vec_kaLpi=0.292851
tabk(39)=556127.244450+(810126.735810i);    // Vec_kaLpi=0.306795
tabk(40)=558049.987360+(808377.563340i);    // Vec_kaLpi=0.321404
tabk(41)=559900.837710+(806528.750230i);    // Vec_kaLpi=0.336708
tabk(42)=561657.697690+(804561.295120i);    // Vec_kaLpi=0.352740
tabk(43)=563339.570040+(802448.415960i);    // Vec_kaLpi=0.369536
tabk(44)=564961.413540+(800180.022620i);    // Vec_kaLpi=0.387132
tabk(45)=566556.220580+(797741.723440i);    // Vec_kaLpi=0.405565
tabk(46)=568113.337980+(795133.548430i);    // Vec_kaLpi=0.424877
tabk(47)=569663.197140+(792349.282500i);    // Vec_kaLpi=0.445108
tabk(48)=571197.031030+(789399.415960i);    // Vec_kaLpi=0.466302
tabk(49)=572740.586050+(786278.499690i);    // Vec_kaLpi=0.488505
tabk(50)=574277.336550+(782977.495880i);    // Vec_kaLpi=0.511766
tabk(51)=575807.681340+(779504.382730i);    // Vec_kaLpi=0.536134
tabk(52)=577333.861540+(775838.915570i);    // Vec_kaLpi=0.561662
tabk(53)=578856.061710+(771990.164120i);    // Vec_kaLpi=0.588406
tabk(54)=570429.705140+(778038.283080i);    // Vec_kaLpi=0.616423
tabk(55)=572070.395900+(774028.184400i);    // Vec_kaLpi=0.645775
tabk(56)=573651.765920+(769761.139210i);    // Vec_kaLpi=0.676524
tabk(57)=575192.269860+(765237.375920i);    // Vec_kaLpi=0.708737
tabk(58)=576644.986190+(760412.652740i);    // Vec_kaLpi=0.742484
tabk(59)=577977.557360+(755245.681140i);    // Vec_kaLpi=0.777838
tabk(60)=579177.843900+(749712.653560i);    // Vec_kaLpi=0.814875
tabk(61)=580194.965610+(743733.137040i);    // Vec_kaLpi=0.853676
tabk(62)=580995.180940+(737251.308830i);    // Vec_kaLpi=0.894325
tabk(63)=581516.299320+(730155.027890i);    // Vec_kaLpi=0.936909
tabk(64)=581695.136830+(722312.100560i);    // Vec_kaLpi=0.981520
tabk(65)=581484.058170+(713542.279320i);    // Vec_kaLpi=1.028256
tabk(66)=580863.421300+(703615.627840i);    // Vec_kaLpi=1.077217
tabk(67)=579829.671670+(692245.615160i);    // Vec_kaLpi=1.128510
tabk(68)=578462.628460+(679107.150510i);    // Vec_kaLpi=1.182245
tabk(69)=576904.330590+(663862.787310i);    // Vec_kaLpi=1.238538
tabk(70)=607249.846820+(618476.789900i);    // Vec_kaLpi=1.297512
tabk(71)=609708.239150+(598316.075930i);    // Vec_kaLpi=1.359294
tabk(72)=651324.595150+(560374.753190i);    // Vec_kaLpi=1.424018
tabk(73)=617036.504070+(555630.340440i);    // Vec_kaLpi=1.491824
tabk(74)=622945.754000+(555072.351800i);    // Vec_kaLpi=1.562858
tabk(75)=625045.509150+(501510.613080i);    // Vec_kaLpi=1.637275
tabk(76)=629964.629030+(467043.920150i);    // Vec_kaLpi=1.715235
tabk(77)=644157.252940+(429700.857310i);    // Vec_kaLpi=1.796907
tabk(78)=659072.990030+(379673.932500i);    // Vec_kaLpi=1.882468
tabk(79)=765574.507480+(254304.499850i);    // Vec_kaLpi=1.972103
tabk(80)=702601.602830+(108020.536020i);    // Vec_kaLpi=2.066006
tabk(81)=688912.878400+(79002.053034i);    // Vec_kaLpi=2.164381
tabk(82)=741917.868040+(57667.461806i);    // Vec_kaLpi=2.267439
tabk(83)=795563.811440+(89039.559496i);    // Vec_kaLpi=2.375405
tabk(84)=-1121621.677000+(143660.544720i);    // Vec_kaLpi=2.488512
tabk(85)=839655.436100+(-200376.587900i);    // Vec_kaLpi=2.607004
tabk(86)=816314.370380+(50007.369886i);    // Vec_kaLpi=2.731139
tabk(87)=891321.875350+(36803.179703i);    // Vec_kaLpi=2.861184
tabk(88)=939413.253080+(49790.305689i);    // Vec_kaLpi=2.997421
tabk(89)=989524.449340+(38132.443850i);    // Vec_kaLpi=3.140146
tabk(90)=1054795.930200+(48323.378087i);    // Vec_kaLpi=3.289666
tabk(91)=1099572.869100+(59869.851384i);    // Vec_kaLpi=3.446306
tabk(92)=1154783.436100+(68082.282172i);    // Vec_kaLpi=3.610405
tabk(93)=1197508.477200+(80423.831247i);    // Vec_kaLpi=3.782317
tabk(94)=1247624.855400+(76092.866968i);    // Vec_kaLpi=3.962414
tabk(95)=1300702.190700+(-41890.900757i);    // Vec_kaLpi=4.151088
tabk(96)=1612984.772700+(467617.311240i);    // Vec_kaLpi=4.348745
tabk(97)=753497.018110+(2702280.410400i);    // Vec_kaLpi=4.555814
tabk(98)=1490095.058600+(13890.653491i);    // Vec_kaLpi=4.772742
tabk(99)=1925133.647400+(226877.027860i);    // Vec_kaLpi=5.000000

int [int] plotindex(20); 
plotindex=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95];
int ii=0; 
for (int jj=0;jj<20;jj++) {
  ii=plotindex(jj); //change index to ii=plotindex(jj) ; 
//klpi= klpimin+(pasklpi*ii); //linear spacing for x
klpi = klpimin*10^((ii*(log10(klpimax)-log10(klpimin))/(nbpt-1)));//log spaced x

 { ofstream f(logfilename,append);
   cout << "klpi: " << klpi << endl;
   f    << "klpi: " << klpi << endl;
 };
 
freq= (c0*klpi)/(2*Lx); 
omega=2*pi*freq;
complex q0=-1i*omega*phi0;

k=tabk(ii); //initial guess (k will be updated in the code)
 { ofstream f(logfilename,append);
   cout << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;
   f    << "k (initial)= " << real(k) << " + " << imag(k) << "i" << endl;
 };
 
complex f0=-1i*k;  // forcing amplitude (-i k Phi0)
complex err1=1.+1i; // dummy error value
// int iteration = 1; not used for final run
// while (abs(err1)> 0.02) { //not used for final run 

//************************************************************//
//************************************************************//
// Solve the problem of density 
//************************************************************//
//************************************************************//
//Define FE space for density
 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of density [1/8]" << endl;
   f    << "***** Solving the problem of density [1/8]" << endl;
 };
// Th: area mesh (fluid area) 
fespace Whr(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr<complex>  [vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr];// variables & test functions 
//------------------------------------------------------------
// Density problem
// dx(f): df/dx 
// int2d(Th)(f): 2d integral 
// on(1,2,3,4,vyr=0): BC
//------------------------------------------------------------
// CONTINUITY EQN IN WEAK FORM (EQ. III) 
problem nonlocalDensity([vxr,vyr,pr,tr,br],[uxr,uyr,rr,sr,lr]) =
int2d(Th)(1i*omega*br*lr-dx(vxr)*lr-dy(vyr)*lr-1i*k*vxr*lr)+
int2d(Th)(
        - 1i*omega*rho0*vxr*uxr-1i*omega*rho0*vyr*uyr
        - pr*(dx(uxr)+dy(uyr))
        + 1i*k*pr*uxr
        + (zeta+1./3*eta)*((dx(vxr)+dy(vyr))*(dx(uxr)+dy(uyr)))
        - 1i*(zeta+1./3*eta)*k*uxr*(dx(vxr)+dy(vyr))
        + 1i*(zeta+1./3*eta)*k*vxr*(dx(uxr)+dy(uyr))
        + eta*(dx(vxr)*dx(uxr)+dy(vxr)*dy(uxr)+dx(vyr)*dx(uyr)+dy(vyr)*dy(uyr))
        + 2*1i*eta*k*(vxr*dx(uxr)+vyr*dx(uyr))
        + eta*(k^2)*(vxr*uxr+vyr*uyr)
        + (zeta+1./3.*eta)*(k^2)*vxr*uxr
        )
      - int2d(Th)(f0*uxr)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr*sr
        + 1i*omega*beta0*T0*pr*sr
        + kappa*(dx(tr)*dx(sr)+dy(tr)*dy(sr))
        + 2*1i*kappa*k*tr*dx(sr)
        + (k^2)*kappa*tr*sr
        )
   + int2d(Th)(gamma*chi0*pr*rr-br*rr-beta0*tr*rr)
+on(1,2,3,4,vyr=0)
+on(5,vxr=0,vyr=0,tr=0);
//------------------------------------------------------------
nonlocalDensity;	//solve: get vx,vy,pr,tr,vr at every meshpoint, corresponding to omega, k 

mesh Thjr=Th; // Creation of the finer mesh Thj          
 real errorr=0.005;
 real errorc=0.005;
 // real errorr=0.002;
 // real errorc=0.002;
 // // rather than doing adaptmesh, load a fine mesh. 
 //mesh Thjr=readmesh("Thjr_NewtCyl_Mode2_phi90_err005.msh");
Thjr=adaptmesh(Thjr,
 [real(vxr),real(vyr),imag(vxr),imag(vyr)],[real(tr),imag(tr)],[real(br),imag(br)]
 ,err=errorr,nbvx=1000000,periodic=[[1,y],[2,y]]);
if(svmesh==true){
 savemeshname = "Thjr_"+ii+"_"+filebase+ ".msh";
 savemesh(Thjr,savemeshname);
 };
if(plmesh==true){
  plotmeshname = "Thjr_"+ii+"_"+filebase+".eps";
  plot(Thjr, wait=false, ps=plotmeshname);
 }

// Solve the density system on the finer mesh Thj
fespace Whjr(Thjr,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr<complex>  [vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr];

{ ofstream f(logfilename,append);
  cout << "***** Solving the problem of density [2/8]" << endl;
  f    << "***** Solving the problem of density [2/8]" << endl;
};
problem nonlocaljDensity([vxjr,vyjr,pjr,tjr,bjr],[uxjr,uyjr,rjr,sjr,ljr]) =
int2d(Thjr)(1i*omega*bjr*ljr-dx(vxjr)*ljr-dy(vyjr)*ljr-1i*k*vxjr*ljr)+
int2d(Thjr)(
        - 1i*omega*rho0*vxjr*uxjr-1i*omega*rho0*vyjr*uyjr
        - pjr*(dx(uxjr)+dy(uyjr))
        + 1i*k*pjr*uxjr
        + (zeta+1./3.*eta)*((dx(vxjr)+dy(vyjr))*(dx(uxjr)+dy(uyjr)))
        - 1i*(zeta+1./3.*eta)*k*uxjr*(dx(vxjr)+dy(vyjr))
        + 1i*(zeta+1./3.*eta)*k*vxjr*(dx(uxjr)+dy(uyjr))
        + eta*(dx(vxjr)*dx(uxjr)+dy(vxjr)*dy(uxjr)+dx(vyjr)*dx(uyjr)+dy(vyjr)*dy(uyjr))
        + 2*1i*eta*k*(vxjr*dx(uxjr)+vyjr*dx(uyjr))
        + eta*(k^2)*(vxjr*uxjr+vyjr*uyjr)
        + (zeta+1./3.*eta)*(k^2)*vxjr*uxjr
        )
      - int2d(Thjr)(f0*uxjr)
   + int2d(Thjr)(
        - 1i*omega*rho0*cp*tjr*sjr
        + 1i*omega*beta0*T0*pjr*sjr
        + kappa*(dx(tjr)*dx(sjr)+dy(tjr)*dy(sjr))
        + 2*1i*kappa*k*tjr*dx(sjr)
        + (k^2)*kappa*tjr*sjr
        )
   + int2d(Thjr)(gamma*chi0*pjr*rjr-bjr*rjr-beta0*tjr*rjr)
+on(1,2,3,4,vyjr=0) // ? I don't want vyjr=0 to be here. I don't want Freefem to assume Neumann BC either. 
+on(5,vxjr=0,vyjr=0,tjr=0);

nonlocaljDensity;

real phir=int2d(Thjr)(1.)/(Vtot); //porosity from discretized area 
real Vfr=int2d(Thjr)(1.);
complex Vxr=1./Vfr*int2d(Thjr)(vxjr); // averaged velocity, V   
complex Hr=int2d(Thjr)(pjr*vxjr)/int2d(Thjr)(vxjr);
rho=(f0-1i*k*Hr)/(-1i*omega*Vxr); //fluid rho. 


//************************************************************//
//************************************************************//
// PLOT FOR RHO
//************************************************************//
//************************************************************//
// vector vxjr,vyjr , scalar pjr,tjr,bjr 
 if(pl==true){
   real[int] colorhsv=[ 
                       5./6., 1 , 1,
                       4./6., 1 , 1,
                       3./6., 1 , 1,
                       2./6., 1 , 1,
                       1./6., 1 , 1,
                       0./6., 1 , 1,
                       0./6., 1 , 0.5 ];

   // fespace WhjrPlot is used to plot velocity and related values
   fespace WhjrPlot(Thjr,P2); 
   // geometry, velocity, temperature, pressure 
   WhjrPlot vxjrRe = real(vxjr); WhjrPlot vxjrIm = imag(vxjr); 
   WhjrPlot vyjrRe = real(vyjr); WhjrPlot vyjrIm = imag(vyjr); 
   WhjrPlot vxjrMag = abs(vxjr); WhjrPlot vyjrMag = abs(vyjr); 
   WhjrPlot vjrMag = sqrt(abs(vxjr)*abs(vxjr)+abs(vyjr)*abs(vyjr)); 
 
   WhjrPlot tjrRe= real(tjr); WhjrPlot tjrIm= imag(tjr); WhjrPlot tjrMag= abs(pjr); 
   WhjrPlot pjrRe= real(pjr); WhjrPlot pjrIm= imag(pjr); WhjrPlot pjrMag= abs(pjr); 

   if(ii==1){
     WhjrPlot geom=1; //save geometry for ii=1; 
     saveplotname="geometry_"+filebase+".eps";
     plot(geom,wait=true, fill=true, bw=true, boundary=false, ps=saveplotname);
   }
   saveplotname = "Re_vxjr"+ii+"_"+filebase+".eps";
   plot(vxjrRe,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Im_vxjr"+ii+"_"+filebase+".eps";
   plot(vxjrIm,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Re_vyjr"+ii+"_"+filebase+".eps";
   plot(vyjrRe,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Im_vyjr"+ii+"_"+filebase+".eps";
   plot(vyjrIm,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vxjr"+ii+"_"+filebase+".eps";
   plot(vxjrMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vyjr"+ii+"_"+filebase+".eps";
   plot(vyjrMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vjr"+ii+"_"+filebase+".eps";
   plot(vjrMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_Tjr"+ii+"_"+filebase+".eps";
   plot(tjrMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// temperature
   saveplotname = "Mag_Pjr"+ii+"_"+filebase+".eps";
   plot(pjrMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// pressure
   
   /* fespace Dh(Thjr,P1dc);  */
   /* Dh<complex> divh=dx(vxjr)+dy(vyjr);  */
   /* Dh magdiv = abs(divh);  */
   /* plot(magdiv,wait=true, fill=true, hsv=colorhsv, boundary=false, ps="magdiv.eps");  */
   // saveplotname = "Re_uxr"+ii+"_"+filebase+".eps";
   // plot(real(uxr),fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// test function 
 }//end if plot; 

//************************************************************//
//************************************************************//
// Solve the problem of compressibility
//************************************************************//
//************************************************************//
//Difine FE space for compressibility
 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of compressibility [3/8]" << endl;
   f    << "***** Solving the problem of compressibility [3/8]" << endl;
 };
fespace Whc(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc<complex>  [vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc];

// Compressibility problem
problem nonlocalCompressibility([vxc,vyc,pc,tc,bc],[uxc,uyc,rc,sc,lc]) =
int2d(Th)(1i*omega*bc*lc-dx(vxc)*lc-dy(vyc)*lc-1i*k*vxc*lc)+
int2d(Th)(
        - 1i*omega*rho0*vxc*uxc-1i*omega*rho0*vyc*uyc
        - pc*(dx(uxc)+dy(uyc))
        + 1i*k*pc*uxc
        + (zeta+1./3*eta)*((dx(vxc)+dy(vyc))*(dx(uxc)+dy(uyc)))
        - 1i*(zeta+1./3*eta)*k*uxc*(dx(vxc)+dy(vyc))
        + 1i*(zeta+1./3*eta)*k*vxc*(dx(uxc)+dy(uyc))
        + eta*(dx(vxc)*dx(uxc)+dy(vxc)*dy(uxc)+dx(vyc)*dx(uyc)+dy(vyc)*dy(uyc))
        + 2*1i*eta*k*(vxc*dx(uxc)+vyc*dx(uyc))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc*sc
        + 1i*omega*beta0*T0*pc*sc
        + kappa*(dx(tc)*dx(sc)+dy(tc)*dy(sc))
        + 2*1i*kappa*k*tc*dx(sc)
        )
   - int2d(Th)(beta0*T0*q0*sc) 
   + int2d(Th)(gamma*chi0*pc*rc-bc*rc-beta0*tc*rc)
+on(1,2,3,4,vyc=0)
+on(5,vxc=0,vyc=0,tc=0);
nonlocalCompressibility;             
    
mesh Thjc=Th;

// Creatioin of finer mesh 
Thjc=adaptmesh(Thjc,
 [real(vxc),real(vyc),imag(vxc),imag(vyc)],[real(tc),imag(tc)],[real(bc),imag(bc)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);
if(svmesh==true){
 savemeshname = "Thjc_"+ii+"_"+filebase+ ".msh";
 savemesh(Thjc,savemeshname);
 };
if(plmesh==true){
  plotmeshname = "Thjc_"+ii+"_"+filebase+".eps";
  plot(Thjc, wait=false, ps=plotmeshname);
 }

// Solve the compressibility system on the finer mesh Thj
fespace Whjc(Thjc,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc<complex>  [vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc];

 { ofstream f(logfilename,append);
   cout << "***** Solving the problem of compressibility [4/8]" << endl;
   f    << "***** Solving the problem of compressibility [4/8]" << endl;
 };
problem nonlocaljCompressibility([vxjc,vyjc,pjc,tjc,bjc],[uxjc,uyjc,rjc,sjc,ljc]) =
int2d(Thjc)(1i*omega*bjc*ljc-dx(vxjc)*ljc-dy(vyjc)*ljc-1i*k*vxjc*ljc)+
int2d(Thjc)(
        - 1i*omega*rho0*vxjc*uxjc-1i*omega*rho0*vyjc*uyjc
        - pjc*(dx(uxjc)+dy(uyjc))
        + 1i*k*pjc*uxjc
        + (zeta+1./3*eta)*((dx(vxjc)+dy(vyjc))*(dx(uxjc)+dy(uyjc)))
        - 1i*(zeta+1./3*eta)*k*uxjc*(dx(vxjc)+dy(vyjc))
        + 1i*(zeta+1./3*eta)*k*vxjc*(dx(uxjc)+dy(uyjc))
        + eta*(dx(vxjc)*dx(uxjc)+dy(vxjc)*dy(uxjc)+dx(vyjc)*dx(uyjc)+dy(vyjc)*dy(uyjc))
        + 2*1i*eta*k*(vxjc*dx(uxjc)+vyjc*dx(uyjc))
        + eta*(k^2)*(vxjc*uxjc+vyjc*uyjc)
        + (zeta+1./3.*eta)*(k^2)*vxjc*uxjc
        )
   + int2d(Thjc)(
        - 1i*omega*rho0*cp*tjc*sjc
        + 1i*omega*beta0*T0*pjc*sjc
        + kappa*(dx(tjc)*dx(sjc)+dy(tjc)*dy(sjc))
        + 2*1i*kappa*k*tjc*dx(sjc)
        + (k^2)*kappa*tjc*sjc
        )
	- int2d(Thjc)(beta0*T0*q0*sjc)
   + int2d(Thjc)(gamma*chi0*pjc*rjc-bjc*rjc-beta0*tjc*rjc)
+on(1,2,3,4,vyjc=0)
+on(5,vxjc=0,vyjc=0,tjc=0);
nonlocaljCompressibility;

real phic=int2d(Thjc)(1.)/(Vtot);
real Vfc=int2d(Thjc)(1.);
complex Vxc=1./Vfc*int2d(Thjc)(vxjc);
complex B=1./Vfc*int2d(Thjc)(bjc);
complex Hc=int2d(Thjc)(pjc*vxjc)/int2d(Thjc)(vxjc);

chi=chi0*(1./chi0*B+gamma*phi0)/(phi0+Hc);


//************************************************************//
//************************************************************//
// PLOT FOR CHI
//************************************************************//
//************************************************************//
// vector vxjc,vyjc, scalar pjc,tjc,bjc
 if(pl){
   real[int] colorhsv=[ 
                       5./6., 1 , 1,
                       4./6., 1 , 1,
                       3./6., 1 , 1,
                       2./6., 1 , 1,
                       1./6., 1 , 1,
                       0./6., 1 , 1,
                       0./6., 1 , 0.5 ];

   // fespace WhjcPlot is used to plot velocity and related values
   fespace WhjcPlot(Thjc,P2); 
   // geometry, velocity, temperature, pressure 
   WhjcPlot vxjcRe = real(vxjc); WhjcPlot vxjcIm = imag(vxjc); 
   WhjcPlot vyjcRe = real(vyjc); WhjcPlot vyjcIm = imag(vyjc); 
   WhjcPlot vxjcMag = abs(vxjc); WhjcPlot vyjcMag = abs(vyjc); 
   WhjcPlot vjcMag = sqrt(abs(vxjc)*abs(vxjc)+abs(vyjc)*abs(vyjc)); 
 
   WhjcPlot tjcRe= real(tjc); WhjcPlot tjcIm= imag(tjc); WhjcPlot tjcMag= abs(pjc); 
   WhjcPlot pjcRe= real(pjc); WhjcPlot pjcIm= imag(pjc); WhjcPlot pjcMag= abs(pjc); 

   if(ii==1){
     WhjcPlot geom=1; //save geometry for ii=1; 
     saveplotname="geometry_"+filebase+".eps";
     plot(geom,wait=true, fill=true, bw=true, boundary=false, ps=saveplotname);
   }
   saveplotname = "Re_vxjc"+ii+"_"+filebase+".eps";
   plot(vxjcRe,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Im_vxjc"+ii+"_"+filebase+".eps";
   plot(vxjcIm,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Re_vyjc"+ii+"_"+filebase+".eps";
   plot(vyjcRe,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Im_vyjc"+ii+"_"+filebase+".eps";
   plot(vyjcIm,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vxjc"+ii+"_"+filebase+".eps";
   plot(vxjcMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vyjc"+ii+"_"+filebase+".eps";
   plot(vyjcMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_vjc"+ii+"_"+filebase+".eps";
   plot(vjcMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// velocity
   saveplotname = "Mag_Tjc"+ii+"_"+filebase+".eps";
   plot(tjcMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// temperature
   saveplotname = "Mag_Pjc"+ii+"_"+filebase+".eps";
   plot(pjcMag,fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// pressure
   
   /* fespace Dh(Thjc,P1dc);  */
   /* Dh<complex> divh=dx(vxjc)+dy(vyjc);  */
   /* Dh magdiv = abs(divh);  */
   /* plot(magdiv,wait=true, fill=true, hsv=colorhsv, boundary=false, ps="magdiv.eps");  */
   // saveplotname = "Re_uxr"+ii+"_"+filebase+".eps";
   // plot(real(uxr),fill=1,wait=0,hsv=colorhsv,ps=saveplotname);// test function 
 }//end if plot; 

//************************************************************//
//************************************************************//
// Start  computing the derivatives
//************************************************************//
//************************************************************//
 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives - density [5/8]" << endl;
   f    << "***** Start  computing the derivatives - density [5/8]" << endl;
 };
complex dk= 0.001*k;
complex k1=k+dk;
complex f01=-1i*k1;

// Compute the density in k+dk, rho1
fespace Whr1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whr1<complex>  [vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1];

problem nonlocalDensity1([vxr1,vyr1,pr1,tr1,br1],[uxr1,uyr1,rr1,sr1,lr1]) =
int2d(Th)(1i*omega*br1*lr1-dx(vxr1)*lr1-dy(vyr1)*lr1-1i*k1*vxr1*lr1)+
int2d(Th)(
        - 1i*omega*rho0*vxr1*uxr1-1i*omega*rho0*vyr1*uyr1
        - pr1*(dx(uxr1)+dy(uyr1))
        + 1i*k1*pr1*uxr1
        + (zeta+1./3*eta)*((dx(vxr1)+dy(vyr1))*(dx(uxr1)+dy(uyr1)))
        - 1i*(zeta+1./3*eta)*k1*uxr1*(dx(vxr1)+dy(vyr1))
        + 1i*(zeta+1./3*eta)*k1*vxr1*(dx(uxr1)+dy(uyr1))
        + eta*(dx(vxr1)*dx(uxr1)+dy(vxr1)*dy(uxr1)+dx(vyr1)*dx(uyr1)+dy(vyr1)*dy(uyr1))
        + 2*1i*eta*k1*(vxr1*dx(uxr1)+vyr1*dx(uyr1))
        + eta*(k^2)*(vxr1*uxr1+vyr1*uyr1)
        + (zeta+1./3.*eta)*(k^2)*vxr1*uxr1
        )
      - int2d(Th)(f01*uxr1)
   + int2d(Th)(
        - 1i*omega*rho0*cp*tr1*sr1
        + 1i*omega*beta0*T0*pr1*sr1
        + kappa*(dx(tr1)*dx(sr1)+dy(tr1)*dy(sr1))
        + 2*1i*kappa*k1*tr1*dx(sr1)
        + (k^2)*kappa*tr1*sr1
        )
   + int2d(Th)(gamma*chi0*pr1*rr1-br1*rr1-beta0*tr1*rr1)
+on(1,2,3,4,vyr1=0)
+on(5,vxr1=0,vyr1=0,tr1=0);
nonlocalDensity1;

mesh Thjr1=Th;
//real error=0.002;
Thjr1=adaptmesh(Thjr1,
 [real(vxr1),real(vyr1),imag(vxr1),imag(vyr1)],[real(tr1),imag(tr1)],[real(br1),imag(br1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);
if(svmesh==true){
 savemeshname = "Thjr1_"+ii+"_"+filebase+ ".msh";
 savemesh(Thjr1,savemeshname);
 };
if(plmesh==true){
  plotmeshname = "Thjr1_"+ii+"_"+filebase+".eps";
  plot(Thjr1, wait=false, ps=plotmeshname);
 }

fespace Whjr1(Thjr1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjr1<complex>  [vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1];

 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives - density [6/8]" << endl;
   f    << "***** Start  computing the derivatives - density [6/8]" << endl;
 };
problem nonlocalj1Density([vxjr1,vyjr1,pjr1,tjr1,bjr1],[uxjr1,uyjr1,rjr1,sjr1,ljr1]) =
int2d(Thjr1)(1i*omega*bjr1*ljr1-dx(vxjr1)*ljr1-dy(vyjr1)*ljr1-1i*k1*vxjr1*ljr1)+
int2d(Thjr1)(
        - 1i*omega*rho0*vxjr1*uxjr1-1i*omega*rho0*vyjr1*uyjr1
        - pjr1*(dx(uxjr1)+dy(uyjr1))
        + 1i*k1*pjr1*uxjr1
        + (zeta+1./3*eta)*((dx(vxjr1)+dy(vyjr1))*(dx(uxjr1)+dy(uyjr1)))
        - 1i*(zeta+1./3*eta)*k1*uxjr1*(dx(vxjr1)+dy(vyjr1))
        + 1i*(zeta+1./3*eta)*k1*vxjr1*(dx(uxjr1)+dy(uyjr1))
        + eta*(dx(vxjr1)*dx(uxjr1)+dy(vxjr1)*dy(uxjr1)+dx(vyjr1)*dx(uyjr1)+dy(vyjr1)*dy(uyjr1))
        + 2*1i*eta*k1*(vxjr1*dx(uxjr1)+vyjr1*dx(uyjr1))
        + eta*(k^2)*(vxjr1*uxjr1+vyjr1*uyjr1)
        + (zeta+1./3.*eta)*(k^2)*vxjr1*uxjr1
        )
      - int2d(Thjr1)(f01*uxjr1)
   + int2d(Thjr1)(
        - 1i*omega*rho0*cp*tjr1*sjr1
        + 1i*omega*beta0*T0*pjr1*sjr1
        + kappa*(dx(tjr1)*dx(sjr1)+dy(tjr1)*dy(sjr1))
        + 2*1i*kappa*k1*tjr1*dx(sjr1)
        + (k^2)*kappa*tjr1*sjr1
        )
   + int2d(Thjr1)(gamma*chi0*pjr1*rjr1-bjr1*rjr1-beta0*tjr1*rjr1)
+on(1,2,3,4,vyjr1=0)
+on(5,vxjr1=0,vyjr1=0,tjr1=0);
nonlocalj1Density;


real phir1=int2d(Thjr1)(1.)/(Vtot);
real Vfr1=int2d(Thjr1)(1.);
complex Vxr1=1./Vfr1*int2d(Thjr1)(vxjr1);
complex Hr1=int2d(Thjr1)(pjr1*vxjr1)/int2d(Thjr1)(vxjr1);
complex rho1=(f01-1i*k1*Hr1)/(-1i*omega*Vxr1);

	

// Compute the compressibility in k+dk, chi1
fespace Whc1(Th,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whc1<complex>  [vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1];

 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives -  compressibility [7/8]" << endl;
   f    << "***** Start  computing the derivatives -  compressibility [7/8]" << endl; 
 };

problem nonlocalCompressibility1([vxc1,vyc1,pc1,tc1,bc1],[uxc1,uyc1,rc1,sc1,lc1]) =
int2d(Th)(1i*omega*bc1*lc1-dx(vxc1)*lc1-dy(vyc1)*lc1-1i*k1*vxc1*lc1)+
int2d(Th)(
        - 1i*omega*rho0*vxc1*uxc1-1i*omega*rho0*vyc1*uyc1
        - pc1*(dx(uxc1)+dy(uyc1))
        + 1i*k1*pc1*uxc1
        + (zeta+1./3*eta)*((dx(vxc1)+dy(vyc1))*(dx(uxc1)+dy(uyc1)))
        - 1i*(zeta+1./3*eta)*k1*uxc1*(dx(vxc1)+dy(vyc1))
        + 1i*(zeta+1./3*eta)*k1*vxc1*(dx(uxc1)+dy(uyc1))
        + eta*(dx(vxc1)*dx(uxc1)+dy(vxc1)*dy(uxc1)+dx(vyc1)*dx(uyc1)+dy(vyc1)*dy(uyc1))
        + 2*1i*eta*k1*(vxc1*dx(uxc1)+vyc1*dx(uyc1))
        )
   + int2d(Th)(
        - 1i*omega*rho0*cp*tc1*sc1
        + 1i*omega*beta0*T0*pc1*sc1
        + kappa*(dx(tc1)*dx(sc1)+dy(tc1)*dy(sc1))
        + 2*1i*kappa*k1*tc1*dx(sc1)
        )
   - int2d(Th)(beta0*T0*q0*sc1) 
   + int2d(Th)(gamma*chi0*pc1*rc1-bc1*rc1-beta0*tc1*rc1)
+on(1,2,3,4,vyc1=0)
+on(5,vxc1=0,vyc1=0,tc1=0);
nonlocalCompressibility1;             
    
mesh Thjc1=Th;
// error=0.002;

Thjc1=adaptmesh(Thjc1,
 [real(vxc1),real(vyc1),imag(vxc1),imag(vyc1)],[real(tc1),imag(tc1)],[real(bc1),imag(bc1)]
 ,err=errorc,nbvx=1000000,periodic=[[1,y],[2,y]]);
if(svmesh==true){
 savemeshname = "Thjc1_"+ii+"_"+filebase+ ".msh";
 savemesh(Thjc1,savemeshname);
 };
if(plmesh==true){
  plotmeshname = "Thjc1_"+ii+"_"+filebase+".eps";
  plot(Thjc1, wait=false, ps=plotmeshname);
 }
fespace Whjc1(Thjc1,[P2,P2,P1,P2,P2],periodic=[[1,y],[2,y]]);
Whjc1<complex>  [vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1];


 { ofstream f(logfilename,append);
   cout << "***** Start  computing the derivatives -  compressibility [8/8]" << endl;
   f    << "***** Start  computing the derivatives -  compressibility [8/8]" << endl; 
 };
problem nonlocalj1Compressibility([vxjc1,vyjc1,pjc1,tjc1,bjc1],[uxjc1,uyjc1,rjc1,sjc1,ljc1]) =
int2d(Thjc1)(1i*omega*bjc1*ljc1-dx(vxjc1)*ljc1-dy(vyjc1)*ljc1-1i*k1*vxjc1*ljc1)+
int2d(Thjc1)(
        - 1i*omega*rho0*vxjc1*uxjc1-1i*omega*rho0*vyjc1*uyjc1
        - pjc1*(dx(uxjc1)+dy(uyjc1))
        + 1i*k1*pjc1*uxjc1
        + (zeta+1./3*eta)*((dx(vxjc1)+dy(vyjc1))*(dx(uxjc1)+dy(uyjc1)))
        - 1i*(zeta+1./3*eta)*k1*uxjc1*(dx(vxjc1)+dy(vyjc1))
        + 1i*(zeta+1./3*eta)*k1*vxjc1*(dx(uxjc1)+dy(uyjc1))
        + eta*(dx(vxjc1)*dx(uxjc1)+dy(vxjc1)*dy(uxjc1)+dx(vyjc1)*dx(uyjc1)+dy(vyjc1)*dy(uyjc1))
        + 2*1i*eta*k1*(vxjc1*dx(uxjc1)+vyjc1*dx(uyjc1))
        + eta*(k^2)*(vxjc1*uxjc1+vyjc1*uyjc1)
        + (zeta+1./3.*eta)*(k^2)*vxjc1*uxjc1
        )
   + int2d(Thjc1)(
        - 1i*omega*rho0*cp*tjc1*sjc1
        + 1i*omega*beta0*T0*pjc1*sjc1
        + kappa*(dx(tjc1)*dx(sjc1)+dy(tjc1)*dy(sjc1))
        + 2*1i*kappa*k1*tjc1*dx(sjc1)
        + (k^2)*kappa*tjc1*sjc1
        )
	- int2d(Thjc1)(beta0*T0*q0*sjc1)
   + int2d(Thjc1)(gamma*chi0*pjc1*rjc1-bjc1*rjc1-beta0*tjc1*rjc1)
+on(1,2,3,4,vyjc1=0)
+on(5,vxjc1=0,vyjc1=0,tjc1=0);
nonlocalj1Compressibility;

real phic1=int2d(Thjc1)(1.)/(Vtot);
real Vfc1=int2d(Thjc1)(1.);
complex Vxc1=1./Vfc1*int2d(Thjc1)(vxjc1);
complex B1=1./Vfc1*int2d(Thjc1)(bjc1);
complex Hc1=int2d(Thjc1)(pjc1*vxjc1)/int2d(Thjc1)(vxjc1);
complex chi1=chi0*(1./chi0*B1+gamma*phi0)/(phi0+Hc1);



//************************************************************//
//************************************************************//
// End  computing the derivatives, Print Results 
//************************************************************//
//************************************************************//
complex Fw2 = omega^2-k^2./rho/chi;
complex F1w2= omega^2-k1^2./rho1/chi1;
complex Frhochiw2 = rho*chi*omega^2-k^2;
complex F1rhochiw2= rho1*chi1*omega^2-k1^2; 

complex F = Frhochiw2;
complex F1= F1rhochiw2; 
complex Fp=(F1-F)/dk; 
complex kout=k-F/Fp; //Newton Raphson 
err1=(kout-k)/k;
k=kout;

//--------------------------------------------------------------------//
// Print iteration number // Print the value of k // Print Error in Newton-Raphson
 { ofstream f(logfilename,append);
   cout << "*****************************************************************"<< endl; 
   cout << "Iteration number: " << "final run" << endl;
   cout << "k=" << k << endl;
   cout << "Erreur : " << abs(err1) << endl;
   cout << "*****************************************************************"<< endl; 

   f << "*****************************************************************"<< endl; 
   f << "Iteration number: " << "final run" << endl; 
   f << "k=" << k << endl; 
   f << "Erreur : " << abs(err1) << endl; 
   f << "*****************************************************************"<< endl; 
 };

// iteration=iteration+1; //not used for final run
//  } //end while //not used for final run 

}//end for 

//--- Record Time 
cpu=clock()-cpu;
{ ofstream f(logfilename,append);
  cout << "cpu: " << cpu << endl;
  f    << "cpu: " << cpu << endl;
};
